/*! For license information please see module.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define(["react"],t):"object"==typeof exports?exports["react-query"]=t(require("react")):e["react-query"]=t(e.react)}(self,(e=>(()=>{"use strict";var t={215:function(e,t,r){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(893),a=r(616),u=r(581),s=r(187),d=o(r(434)),i=r(324),l=r(759),c=o(r(63)),f=r(156);t.default=({children:e,endPoints:t,onCreated:r,onRead:o,onUpdated:p,onDeleted:y,delay:m,type:h="array"})=>{const[g,b,v,O]="string"==typeof t?new Array(4).fill(t):[t.create,t.read,t.update,t.delete],{parameterType:j,domain:_,requestMiddleware:q,mode:P,verbosity:x,idName:E}=(0,l.useQueryOptions)();return(0,f.useEffect)((()=>{(0,u.requestLog)(P,x,5,"[endpoints]",`[C]${g}`,`[R]${b}`,`[U]${v}`,`[D]${O}`)}),[g,b,v,O]),(0,n.jsx)(d.default,{children:(0,n.jsx)(i.Query,{query:`${b}`,delay:m,onRead:o,children:({data:t,loading:o,error:d,manualUpdate:i,forceRefresh:l})=>(0,n.jsx)(f.Fragment,{children:e({handleCreate:(e,o={method:"POST"})=>{e.preventDefault();const{method:n="POST",pathTail:d}=o,c=(0,s.getFormData)(e.target),f=`${g}/${d?`${d}/`:""}`;return(0,u.requestLog)(P,x,1,`[create][${n}]`,`${_}/${f}`,c),(0,a.request)(_,f,{body:JSON.stringify(c),method:n,headers:q?.(),mode:P}).then((e=>{i?.([...t,e]),r?.()&&l?.()})).catch((()=>{console.error("Erreur de création","Une erreur est survenu lors de la création dans la base de données")}))},read:{data:t,loading:o,error:d},handleUpdate:(e,r={method:"PUT",name:E})=>{e.preventDefault();const{method:o="PUT",pathTail:n,name:d=E}=r,f=(0,s.formExtractor)(e.target,d);let y;y="array"==h?[...t]:t;const m=[];return f.forEach((e=>{const r=(0,s.getPathTail)(e,j,d,n),i=`${v}/${r?`${r}/`:""}`;let l=!1;if("array"==h){const t=y.findIndex((e=>e[d]==r));if(null!=t){const r={...y[t],...e};l=!(0,c.default)(y[t],r),y[t]=r}else y.push(e)}else l=!(0,c.default)(y,t),y={...y,...e};l&&((0,u.requestLog)(P,x,1,`[update][${o}]`,`${_}/${i}`,e),m.push((0,a.request)(_,i,{body:JSON.stringify(e),method:o,headers:q?.(),mode:P})))})),Promise.all(m).then((()=>{i?.(y),p?.()&&l?.()}))},handleDelete:(e,r={method:"DELETE",name:E})=>{e?.preventDefault(),e?.stopPropagation();const{method:o="DELETE",pathTail:n,name:d=E,id:c}=r,f=(0,s.getPathTail)({[d]:c.toString()},j,d,n),p=`${O}/${f}/`;return(0,u.requestLog)(P,x,1,`[delete][${o}]`,`${_}/${p}`),(0,a.request)(_,p,{method:o,headers:q?.(),mode:P}).then((()=>{if("array"==h){const e=t.findIndex((e=>e[d]==c)),r=t;(0,u.requestLog)(P,x,3,`Removing index ${e}`);const o=[...r.slice(0,e),...r.slice(e+1,r.length)];(0,u.requestLog)(P,x,4,"Array updated",o),i?.(o)}else i?.(t);y?.()&&l?.()}))}},l)})})})}},434:function(e,t,r){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(893),a=o(r(180)),u=o(r(156));class s extends u.default.Component{constructor(){super(...arguments),this.state={hasError:!1,error:{e:void 0,info:void 0}},this.componentDidCatch=(e,t)=>{console.error(e),this.setState({hasError:!0,error:{e,info:t}})}}render(){const{children:e}=this.props,{hasError:t,error:r}=this.state;return t?(0,n.jsxs)("div",{className:a.default.main,children:[(0,n.jsx)("div",{children:r?.e?.message}),(0,n.jsx)("hr",{}),(0,n.jsx)("div",{children:r?.info?.componentStack})]}):(0,n.jsx)(u.default.Fragment,{children:e})}}t.default=s},324:function(e,t,r){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Query=t.useQuery=void 0;const n=r(893),a=r(616),u=o(r(434)),s=r(759),d=r(156);t.useQuery=({query:e,delay:t,onRead:r,requestOptions:o={},useConfig:n=!0})=>{const[u,i]=(0,d.useState)({data:null,loading:!0,error:null}),{domain:l="",onRejected:c}=o,{onRejected:f}=(0,s.useQueryOptions)(),p=n?(0,s.useRequest)(o):(e,t)=>(0,a.request)(l,e,t),[y,m]=(0,d.useState)(),[h,g]=(0,d.useState)(!1),b=(0,d.useCallback)((e=>i({data:e,loading:!1,error:null})),[u]);return(0,d.useEffect)((()=>{y?.abort();const o=new AbortController,n=window.setTimeout((()=>{p(e,{signal:o.signal,onRejected:e=>{b(void 0)}}).then((e=>{i({data:e,loading:!1,error:null}),r?.(e)})).catch((e=>{r?.(void 0),i({data:null,loading:!1,error:e.toString()})}))}),t??0);return m(o),i({data:null,loading:!0,error:null}),()=>{o?.abort(),window.clearTimeout(n)}}),[e,h]),{data:u.data,loading:u.loading,error:u.error,manualUpdate:b,forceRefresh:()=>g(!h)}},t.Query=({children:e,query:r,delay:o,onRead:a,requestOptions:s,useConfig:d=!0})=>{const{data:i,loading:l,error:c,forceRefresh:f,manualUpdate:p}=(0,t.useQuery)({query:r,delay:o,onRead:a,requestOptions:s,useConfig:d});return(0,n.jsx)(u.default,{children:e({data:i,loading:l,error:c,manualUpdate:p,forceRefresh:f})})}},759:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.QueryOptionsProvider=t.useRequest=t.useQueryOptions=void 0;const o=r(616),n=r(156),a=(0,n.createContext)({domain:"",parameterType:"path",mode:"production",verbosity:1,idName:"id"});t.useQueryOptions=()=>{const e=(0,n.useContext)(a);if(!e)throw new Error("No context for 'useQueryOptions'");return e.idName||(e.idName="id"),e},t.useRequest=({body:e,headers:r,method:n="GET",mode:a,onRejected:u,signal:s}={method:"GET"})=>{const{domain:d,mode:i=a,requestMiddleware:l=(()=>r),onRejected:c=u}=(0,t.useQueryOptions)();return function(t,r={method:"GET"}){const{headers:a=l?.(),body:u=e,method:f=n,mode:p=i,signal:y=s,onRejected:m=c}=r;return(0,o.request)(d,t,{body:u,headers:a,method:f,mode:p,signal:y,onRejected:m})}},t.QueryOptionsProvider=a.Provider},276:function(e,t,r){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useQuery=t.useQueryOptions=t.useRequest=t.request=t.QueryOptionsProvider=t.Query=t.CRUD=void 0;const n=o(r(215));t.CRUD=n.default;const a=r(324);Object.defineProperty(t,"Query",{enumerable:!0,get:function(){return a.Query}}),Object.defineProperty(t,"useQuery",{enumerable:!0,get:function(){return a.useQuery}});const u=r(759);Object.defineProperty(t,"QueryOptionsProvider",{enumerable:!0,get:function(){return u.QueryOptionsProvider}}),Object.defineProperty(t,"useQueryOptions",{enumerable:!0,get:function(){return u.useQueryOptions}}),Object.defineProperty(t,"useRequest",{enumerable:!0,get:function(){return u.useRequest}});const s=r(616);Object.defineProperty(t,"request",{enumerable:!0,get:function(){return s.request}})},616:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.request=void 0;const o=r(581);t.request=function(e,t,r={method:"GET"}){const{body:n,method:a="GET",headers:u,mode:s="production",signal:d,onRejected:i}=r,l=r=>fetch(`${e}/${t}`,{headers:r,method:a,body:n,signal:d}).then((e=>e.ok?e.text().then((t=>{try{if("application/json"==r?.["Content-Type"])return JSON.parse(t)}catch(t){(0,o.queryWarn)(s,0,0,"Could not parse response to json",e)}return t})):Promise.reject(e))).catch((e=>{"AbortError"==e.name?(0,o.queryWarn)(s,0,0,e.message):((0,o.queryError)(`${e.url} ${e.status} ${e.statusText}`),i?.(e))}));return u?u.then(l):l({})}},581:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.queryError=t.queryWarn=t.requestLog=void 0,t.requestLog=(e,t,r,...o)=>{"development"==e&&r<=t&&console.log("[react-query]",...o)},t.queryWarn=(e,t,r,...o)=>{"development"==e&&r<=t&&console.warn("[react-query]",...o)},t.queryError=(...e)=>{console.error("[react-query]",...e)}},187:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.useForceUpdate=t.getPathTail=t.seperate=t.seperateAndKeepIds=t.formExtractor=t.getFormData=void 0;const o=r(156);t.getFormData=e=>{const t=e;return Object.keys(e).map((e=>t[e])).filter((e=>{const t=e.tagName?.toLocaleLowerCase?.();return e.name&&("input"==t||"select"==t)})).reduce(((e,t)=>{const{name:r,value:o,checked:n,type:a,required:u}=t,s="checkbox"==a;if(u&&(""==o||null==o))throw new Error(`Can't use an empty value for ${r}`);let d="number"==a?new Number(o).valueOf():o;return{...e,[r]:s?n:d}}),{})},t.formExtractor=(e,r)=>{const o=(0,t.getFormData)(e);return null!=o[r]?[o]:Object.entries(o).reduce(((e,o)=>{const n=o[0],[a,u]=(0,t.seperateAndKeepIds)([n])[0],s=e.find((e=>e[r]==u));let d=u;try{d=parseInt(u)}catch(e){}return s?s[a]=o[1]:e.push({[r]:d,[a]:o[1]}),e}),[])},t.seperateAndKeepIds=e=>(0,t.seperate)(e).map((e=>{const t=e[1],r=t[t.length-1];return[e[0].replace(new RegExp(`(-|_)?${r}$`),""),r]})),t.seperate=e=>e.map((e=>[e,e.replace(/([0-9]+)/," $1").replace(/(-|_)/g," ").replace(/([A-Z])/g," $1").trim().toLocaleLowerCase().split(" ").filter((e=>""!=e))])),t.getPathTail=(e,t,r,o)=>{const n=e[r];return"path"==t&&""!=n&&null!=n?n:o},t.useForceUpdate=()=>(0,o.useReducer)((()=>({})),{})[1]},63:e=>{e.exports=function e(t,r){if(t===r)return!0;if(t&&r&&"object"==typeof t&&"object"==typeof r){if(t.constructor!==r.constructor)return!1;var o,n,a;if(Array.isArray(t)){if((o=t.length)!=r.length)return!1;for(n=o;0!=n--;)if(!e(t[n],r[n]))return!1;return!0}if(t.constructor===RegExp)return t.source===r.source&&t.flags===r.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===r.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===r.toString();if((o=(a=Object.keys(t)).length)!==Object.keys(r).length)return!1;for(n=o;0!=n--;)if(!Object.prototype.hasOwnProperty.call(r,a[n]))return!1;for(n=o;0!=n--;){var u=a[n];if(!e(t[u],r[u]))return!1}return!0}return t!=t&&r!=r}},180:(e,t,r)=>{r.r(t),r.d(t,{default:()=>o});const o={"button-default":"N34oaDgHtJlptqxVv9Pn","button-selected":"Ja0ovO_h3eaEsaboqDC7","button-primary":"KTfuLE7LnSGRHDFPD0EA","button-validate":"jY9MIHyO7T8W_QNpfx0k","button-inverse":"m40wbnuJh67XxmYctJLR","button-ignore":"ZeIjhLVvw0JqjuR8kYjT","button-invalid":"ZedjeDkFzo6JcAGxyZPn","button-valid":"Jk7f76XpP7SLD92LvmM3",main:"SIApxQzQlZp0L1gN0_QW"}},251:(e,t,r)=>{var o=r(156),n=Symbol.for("react.element"),a=Symbol.for("react.fragment"),u=Object.prototype.hasOwnProperty,s=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,d={key:!0,ref:!0,__self:!0,__source:!0};function i(e,t,r){var o,a={},i=null,l=null;for(o in void 0!==r&&(i=""+r),void 0!==t.key&&(i=""+t.key),void 0!==t.ref&&(l=t.ref),t)u.call(t,o)&&!d.hasOwnProperty(o)&&(a[o]=t[o]);if(e&&e.defaultProps)for(o in t=e.defaultProps)void 0===a[o]&&(a[o]=t[o]);return{$$typeof:n,type:e,key:i,ref:l,props:a,_owner:s.current}}t.Fragment=a,t.jsx=i,t.jsxs=i},893:(e,t,r)=>{e.exports=r(251)},156:t=>{t.exports=e}},r={};function o(e){var n=r[e];if(void 0!==n)return n.exports;var a=r[e]={exports:{}};return t[e].call(a.exports,a,a.exports,o),a.exports}return o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o(276)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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WEosRUFBb0JLLEVBQUVELEVBQVlsRCxLQUFTOEMsRUFBb0JLLEVBQUVwUSxFQUFTaU4sSUFDNUV0TSxPQUFPQyxlQUFlWixFQUFTaU4sRUFBSyxDQUFFMUMsWUFBWSxFQUFNQyxJQUFLMkYsRUFBV2xELE1DSjNFOEMsRUFBb0JLLEVBQUksQ0FBQ0MsRUFBS0MsSUFBVTNQLE9BQU8yTixVQUFVQyxlQUFlQyxLQUFLNkIsRUFBS0MsR0NDbEZQLEVBQW9CUSxFQUFLdlEsSUFDSCxvQkFBWDBPLFFBQTBCQSxPQUFPOEIsYUFDMUM3UCxPQUFPQyxlQUFlWixFQUFTME8sT0FBTzhCLFlBQWEsQ0FBRTNQLE1BQU8sV0FFN0RGLE9BQU9DLGVBQWVaLEVBQVMsYUFBYyxDQUFFYSxPQUFPLEtDRjdCa1AsRUFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1xdWVyeS93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vcmVhY3QtcXVlcnkvLi9zcmMvY29tcG9uZW50cy91dGlscy9DUlVEL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9yZWFjdC1xdWVyeS8uL3NyYy9jb21wb25lbnRzL3V0aWxzL0Vycm9yQm91bmRhcnkvaW5kZXgudHN4Iiwid2VicGFjazovL3JlYWN0LXF1ZXJ5Ly4vc3JjL2NvbXBvbmVudHMvdXRpbHMvUXVlcnkvaW5kZXgudHN4Iiwid2VicGFjazovL3JlYWN0LXF1ZXJ5Ly4vc3JjL2NvbXBvbmVudHMvdXRpbHMvUXVlcnlPcHRpb25zUHJvdmlkZXIvaW5kZXgudHN4Iiwid2VicGFjazovL3JlYWN0LXF1ZXJ5Ly4vc3JjL21vZHVsZS50cyIsIndlYnBhY2s6Ly9yZWFjdC1xdWVyeS8uL3NyYy91dGlscy9hcGkudHMiLCJ3ZWJwYWNrOi8vcmVhY3QtcXVlcnkvLi9zcmMvdXRpbHMvbG9nLnRzIiwid2VicGFjazovL3JlYWN0LXF1ZXJ5Ly4vc3JjL3V0aWxzL3V0aWwudHMiLCJ3ZWJwYWNrOi8vcmVhY3QtcXVlcnkvLi9ub2RlX21vZHVsZXMvZmFzdC1kZWVwLWVxdWFsL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0LXF1ZXJ5Ly4vc3JjL2NvbXBvbmVudHMvdXRpbHMvRXJyb3JCb3VuZGFyeS9pbmRleC5tb2R1bGUuc2Nzcz82OTk5Iiwid2VicGFjazovL3JlYWN0LXF1ZXJ5Ly4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC1xdWVyeS8uL25vZGVfbW9kdWxlcy9yZWFjdC9qc3gtcnVudGltZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC1xdWVyeS9leHRlcm5hbCB1bWQgXCJyZWFjdFwiIiwid2VicGFjazovL3JlYWN0LXF1ZXJ5L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3JlYWN0LXF1ZXJ5L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9yZWFjdC1xdWVyeS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3JlYWN0LXF1ZXJ5L3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vcmVhY3QtcXVlcnkvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcInJlYWN0XCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcInJlYWN0XCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcInJlYWN0LXF1ZXJ5XCJdID0gZmFjdG9yeShyZXF1aXJlKFwicmVhY3RcIikpO1xuXHRlbHNlXG5cdFx0cm9vdFtcInJlYWN0LXF1ZXJ5XCJdID0gZmFjdG9yeShyb290W1wicmVhY3RcIl0pO1xufSkoc2VsZiwgKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzE1Nl9fKSA9PiB7XG5yZXR1cm4gIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBqc3hfcnVudGltZV8xID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xuY29uc3QgYXBpXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vdXRpbHMvYXBpXCIpO1xuY29uc3QgbG9nXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vdXRpbHMvbG9nXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uLy4uL3V0aWxzL3V0aWxcIik7XG5jb25zdCBFcnJvckJvdW5kYXJ5XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL0Vycm9yQm91bmRhcnlcIikpO1xuY29uc3QgUXVlcnlfMSA9IHJlcXVpcmUoXCIuLi9RdWVyeVwiKTtcbmNvbnN0IFF1ZXJ5T3B0aW9uc1Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi4vUXVlcnlPcHRpb25zUHJvdmlkZXJcIik7XG5jb25zdCBmYXN0X2RlZXBfZXF1YWxfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZmFzdC1kZWVwLWVxdWFsXCIpKTtcbmNvbnN0IHJlYWN0XzEgPSByZXF1aXJlKFwicmVhY3RcIik7XG4vKipcbiAqIFRoaXMgY29tcG9uZW50IGlzIHVzZWQgdG8gc2ltcGxpZnkgYENSVURgIG9wZXJhdGlvbnMuXG4gKiBZb3UgZ2l2ZSBpdCB0aGUgYGVuZHBvaW50KHMpYCB0byB3aGljaCB5b3Ugd2FudCB0byBkbyByZXF1ZXN0cyBhbmQgaXQgd2lsbCBoYW5kbGVcbiAqIGFsbCBvZiB0aGUgdGFza3MgaW4gdGhlIGJhY2tncm91bmQgYW5kIHVwZGF0ZSB0aGUgc3RhdGUgb2YgdGhlIHZhcmlhYmxlc1xuICogaXQgZ2l2ZXMgeW91IGZyb20gdGhlIGNoaWxkIGZ1bmN0aW9uLlxuICpcbiAqIE1ha2Ugc3VyZSB0byBkZWZpbmUgdGhlIFF1ZXJ5T3B0aW9ucyBwYXJhbSB3aXRoIHRoZSBgUXVlcnlPcHRpb25zUHJvdmlkZXJgIGNvbXBvbmVudFxuICpcbiAqIEdvIHRvIHRoZSBbZXhhbXBsZXMgZGlyZWN0b3J5XShodHRwczovL2JpdGJ1Y2tldC5vcmcvbmVvdmlzaW9uL3JlYWN0LXF1ZXJ5L3NyYy9tYXN0ZXIvc3JjL2V4YW1wbGVzKSB0byBzZWUgZXhhbXBsZXNcbiAqL1xuY29uc3QgQ1JVRCA9ICh7IGNoaWxkcmVuLCBlbmRQb2ludHMsIG9uQ3JlYXRlZCwgb25SZWFkLCBvblVwZGF0ZWQsIG9uRGVsZXRlZCwgZGVsYXksIHR5cGUgPSAnYXJyYXknLCB9KSA9PiB7XG4gICAgY29uc3QgW2NyZWF0ZUVuZHBvaW50LCByZWFkRW5kcG9pbnQsIHVwZGF0ZUVuZHBvaW50LCBkZWxldGVFbmRwb2ludF0gPSB0eXBlb2YgZW5kUG9pbnRzID09ICdzdHJpbmcnXG4gICAgICAgID8gbmV3IEFycmF5KDQpLmZpbGwoZW5kUG9pbnRzKVxuICAgICAgICA6IFtlbmRQb2ludHMuY3JlYXRlLCBlbmRQb2ludHMucmVhZCwgZW5kUG9pbnRzLnVwZGF0ZSwgZW5kUG9pbnRzLmRlbGV0ZV07XG4gICAgY29uc3QgeyBwYXJhbWV0ZXJUeXBlLCBkb21haW4sIHJlcXVlc3RNaWRkbGV3YXJlLCBtb2RlLCB2ZXJib3NpdHksIGlkTmFtZSB9ID0gKDAsIFF1ZXJ5T3B0aW9uc1Byb3ZpZGVyXzEudXNlUXVlcnlPcHRpb25zKSgpO1xuICAgICgwLCByZWFjdF8xLnVzZUVmZmVjdCkoKCkgPT4ge1xuICAgICAgICAoMCwgbG9nXzEucmVxdWVzdExvZykobW9kZSwgdmVyYm9zaXR5LCA1LCBgW2VuZHBvaW50c11gLCBgW0NdJHtjcmVhdGVFbmRwb2ludH1gLCBgW1JdJHtyZWFkRW5kcG9pbnR9YCwgYFtVXSR7dXBkYXRlRW5kcG9pbnR9YCwgYFtEXSR7ZGVsZXRlRW5kcG9pbnR9YCk7XG4gICAgfSwgW2NyZWF0ZUVuZHBvaW50LCByZWFkRW5kcG9pbnQsIHVwZGF0ZUVuZHBvaW50LCBkZWxldGVFbmRwb2ludF0pO1xuICAgIHJldHVybiAoKDAsIGpzeF9ydW50aW1lXzEuanN4KShFcnJvckJvdW5kYXJ5XzEuZGVmYXVsdCwgeyBjaGlsZHJlbjogKDAsIGpzeF9ydW50aW1lXzEuanN4KShRdWVyeV8xLlF1ZXJ5LCB7IHF1ZXJ5OiBgJHtyZWFkRW5kcG9pbnR9YCwgZGVsYXk6IGRlbGF5LCBvblJlYWQ6IG9uUmVhZCwgY2hpbGRyZW46ICh7IGRhdGEsIGxvYWRpbmcsIGVycm9yLCBtYW51YWxVcGRhdGUsIGZvcmNlUmVmcmVzaCB9KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgoMCwganN4X3J1bnRpbWVfMS5qc3gpKHJlYWN0XzEuRnJhZ21lbnQsIHsgY2hpbGRyZW46IGNoaWxkcmVuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUNyZWF0ZTogKGUsIHBhcmFtcyA9IHsgbWV0aG9kOiAnUE9TVCcgfSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IG1ldGhvZCA9ICdQT1NUJywgcGF0aFRhaWwgfSA9IHBhcmFtcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtRGF0YSA9ICgwLCB1dGlsXzEuZ2V0Rm9ybURhdGEpKGUudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmRwb2ludCA9IGAke2NyZWF0ZUVuZHBvaW50fS8ke3BhdGhUYWlsID8gYCR7cGF0aFRhaWx9L2AgOiAnJ31gO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBsb2dfMS5yZXF1ZXN0TG9nKShtb2RlLCB2ZXJib3NpdHksIDEsIGBbY3JlYXRlXVske21ldGhvZH1dYCwgYCR7ZG9tYWlufS8ke2VuZHBvaW50fWAsIGZvcm1EYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKDAsIGFwaV8xLnJlcXVlc3QpKGRvbWFpbiwgZW5kcG9pbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZm9ybURhdGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHJlcXVlc3RNaWRkbGV3YXJlPy4oKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbigoY3JlYXRlZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW51YWxVcGRhdGU/LihbLi4uZGF0YSwgY3JlYXRlZF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNyZWF0ZWQ/LigpICYmIGZvcmNlUmVmcmVzaD8uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyZXVyIGRlIGNyw6lhdGlvbmAsIGBVbmUgZXJyZXVyIGVzdCBzdXJ2ZW51IGxvcnMgZGUgbGEgY3LDqWF0aW9uIGRhbnMgbGEgYmFzZSBkZSBkb25uw6llc2ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWQ6IHsgZGF0YSwgbG9hZGluZywgZXJyb3IgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZVVwZGF0ZTogKGUsIHBhcmFtcyA9IHsgbWV0aG9kOiAnUFVUJywgbmFtZTogaWROYW1lIH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBtZXRob2QgPSAnUFVUJywgcGF0aFRhaWwsIG5hbWUgPSBpZE5hbWUgfSA9IHBhcmFtcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtRGF0YXMgPSAoMCwgdXRpbF8xLmZvcm1FeHRyYWN0b3IpKGUudGFyZ2V0LCBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV3RGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSAnYXJyYXknKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdEYXRhID0gWy4uLmRhdGFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RGF0YSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtRGF0YXMuZm9yRWFjaCgoZm9ybURhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFpbCA9ICgwLCB1dGlsXzEuZ2V0UGF0aFRhaWwpKGZvcm1EYXRhLCBwYXJhbWV0ZXJUeXBlLCBuYW1lLCBwYXRoVGFpbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZHBvaW50ID0gYCR7dXBkYXRlRW5kcG9pbnR9LyR7dGFpbCA/IGAke3RhaWx9L2AgOiAnJ31gO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSAnYXJyYXknKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IG5ld0RhdGEuZmluZEluZGV4KCh2YWwpID0+IHZhbFtuYW1lXSA9PSB0YWlsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXJnZWREYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5uZXdEYXRhW2luZGV4XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uZm9ybURhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNDaGFuZ2VkID0gISgwLCBmYXN0X2RlZXBfZXF1YWxfMS5kZWZhdWx0KShuZXdEYXRhW2luZGV4XSwgbWVyZ2VkRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RGF0YVtpbmRleF0gPSBtZXJnZWREYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0RhdGEucHVzaChmb3JtRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNDaGFuZ2VkID0gISgwLCBmYXN0X2RlZXBfZXF1YWxfMS5kZWZhdWx0KShuZXdEYXRhLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0RhdGEgPSB7IC4uLm5ld0RhdGEsIC4uLmZvcm1EYXRhIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0NoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBsb2dfMS5yZXF1ZXN0TG9nKShtb2RlLCB2ZXJib3NpdHksIDEsIGBbdXBkYXRlXVske21ldGhvZH1dYCwgYCR7ZG9tYWlufS8ke2VuZHBvaW50fWAsIGZvcm1EYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2goKDAsIGFwaV8xLnJlcXVlc3QpKGRvbWFpbiwgZW5kcG9pbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShmb3JtRGF0YSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHJlcXVlc3RNaWRkbGV3YXJlPy4oKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFudWFsVXBkYXRlPy4obmV3RGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uVXBkYXRlZD8uKCkgJiYgZm9yY2VSZWZyZXNoPy4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVEZWxldGU6IChlLCBwYXJhbXMgPSB7IG1ldGhvZDogJ0RFTEVURScsIG5hbWU6IGlkTmFtZSB9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZT8ucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlPy5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IG1ldGhvZCA9ICdERUxFVEUnLCBwYXRoVGFpbCwgbmFtZSA9IGlkTmFtZSwgaWQsIH0gPSBwYXJhbXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFpbCA9ICgwLCB1dGlsXzEuZ2V0UGF0aFRhaWwpKHsgW25hbWVdOiBpZC50b1N0cmluZygpIH0sIHBhcmFtZXRlclR5cGUsIG5hbWUsIHBhdGhUYWlsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmRwb2ludCA9IGAke2RlbGV0ZUVuZHBvaW50fS8ke3RhaWx9L2A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIGxvZ18xLnJlcXVlc3RMb2cpKG1vZGUsIHZlcmJvc2l0eSwgMSwgYFtkZWxldGVdWyR7bWV0aG9kfV1gLCBgJHtkb21haW59LyR7ZW5kcG9pbnR9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgwLCBhcGlfMS5yZXF1ZXN0KShkb21haW4sIGVuZHBvaW50LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogcmVxdWVzdE1pZGRsZXdhcmU/LigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSAnYXJyYXknKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGRhdGEuZmluZEluZGV4KCh2YWwpID0+IHZhbFtuYW1lXSA9PSBpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0eXBlZERhdGEgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIGxvZ18xLnJlcXVlc3RMb2cpKG1vZGUsIHZlcmJvc2l0eSwgMywgYFJlbW92aW5nIGluZGV4ICR7aW5kZXh9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdBcnIgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4udHlwZWREYXRhLnNsaWNlKDAsIGluZGV4KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi50eXBlZERhdGEuc2xpY2UoaW5kZXggKyAxLCB0eXBlZERhdGEubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgbG9nXzEucmVxdWVzdExvZykobW9kZSwgdmVyYm9zaXR5LCA0LCBgQXJyYXkgdXBkYXRlZGAsIG5ld0Fycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW51YWxVcGRhdGU/LihuZXdBcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFudWFsVXBkYXRlPy4oZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25EZWxldGVkPy4oKSAmJiBmb3JjZVJlZnJlc2g/LigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSwgZm9yY2VSZWZyZXNoKSB9KSk7XG4gICAgICAgICAgICB9IH0pIH0pKTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBDUlVEO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBqc3hfcnVudGltZV8xID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5zYWZlLWZpbmFsbHkgKi9cbmNvbnN0IGluZGV4X21vZHVsZV9zY3NzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vaW5kZXgubW9kdWxlLnNjc3NcIikpO1xuY29uc3QgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuY2xhc3MgRXJyb3JCb3VuZGFyeSBleHRlbmRzIHJlYWN0XzEuZGVmYXVsdC5Db21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgaGFzRXJyb3I6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3I6IHsgZTogdW5kZWZpbmVkLCBpbmZvOiB1bmRlZmluZWQgfSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jb21wb25lbnREaWRDYXRjaCA9IChlLCBpbmZvKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGhhc0Vycm9yOiB0cnVlLCBlcnJvcjogeyBlLCBpbmZvIH0gfSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgeyBoYXNFcnJvciwgZXJyb3IgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGlmICghaGFzRXJyb3IpXG4gICAgICAgICAgICByZXR1cm4gKDAsIGpzeF9ydW50aW1lXzEuanN4KShyZWFjdF8xLmRlZmF1bHQuRnJhZ21lbnQsIHsgY2hpbGRyZW46IGNoaWxkcmVuIH0pO1xuICAgICAgICByZXR1cm4gKCgwLCBqc3hfcnVudGltZV8xLmpzeHMpKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBpbmRleF9tb2R1bGVfc2Nzc18xLmRlZmF1bHQubWFpbiwgY2hpbGRyZW46IFsoMCwganN4X3J1bnRpbWVfMS5qc3gpKFwiZGl2XCIsIHsgY2hpbGRyZW46IGVycm9yPy5lPy5tZXNzYWdlIH0pLCAoMCwganN4X3J1bnRpbWVfMS5qc3gpKFwiaHJcIiwge30pLCAoMCwganN4X3J1bnRpbWVfMS5qc3gpKFwiZGl2XCIsIHsgY2hpbGRyZW46IGVycm9yPy5pbmZvPy5jb21wb25lbnRTdGFjayB9KV0gfSkpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEVycm9yQm91bmRhcnk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUXVlcnkgPSBleHBvcnRzLnVzZVF1ZXJ5ID0gdm9pZCAwO1xuY29uc3QganN4X3J1bnRpbWVfMSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcbmNvbnN0IGFwaV8xID0gcmVxdWlyZShcIi4uLy4uLy4uL3V0aWxzL2FwaVwiKTtcbmNvbnN0IEVycm9yQm91bmRhcnlfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vRXJyb3JCb3VuZGFyeVwiKSk7XG5jb25zdCBRdWVyeU9wdGlvbnNQcm92aWRlcl8xID0gcmVxdWlyZShcIi4uL1F1ZXJ5T3B0aW9uc1Byb3ZpZGVyXCIpO1xuY29uc3QgcmVhY3RfMSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHVzZVF1ZXJ5ID0gKHsgcXVlcnksIGRlbGF5LCBvblJlYWQsIHJlcXVlc3RPcHRpb25zID0ge30sIHVzZUNvbmZpZyA9IHRydWUgfSkgPT4ge1xuICAgIC8vIFRoZSBkZWZhdWx0IGRhdGEvbG9hZC9lcnJvciB0cmlwbGVcbiAgICBjb25zdCBbZGF0YUxvYWRFcnIsIHNldERhdGFMb2FkRXJyXSA9ICgwLCByZWFjdF8xLnVzZVN0YXRlKSh7XG4gICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICAgIGVycm9yOiBudWxsXG4gICAgfSk7XG4gICAgY29uc3QgeyBkb21haW4gPSBcIlwiLCBvblJlamVjdGVkOiByT25SZWplY3RlZCB9ID0gcmVxdWVzdE9wdGlvbnM7XG4gICAgY29uc3QgeyBvblJlamVjdGVkOiBxT25SZWplY3RlZCB9ID0gKDAsIFF1ZXJ5T3B0aW9uc1Byb3ZpZGVyXzEudXNlUXVlcnlPcHRpb25zKSgpO1xuICAgIGNvbnN0IHJlcSA9IHVzZUNvbmZpZ1xuICAgICAgICA/ICgwLCBRdWVyeU9wdGlvbnNQcm92aWRlcl8xLnVzZVJlcXVlc3QpKHJlcXVlc3RPcHRpb25zKVxuICAgICAgICA6IChwYXRoLCBvcHRpb25zKSA9PiAoMCwgYXBpXzEucmVxdWVzdCkoZG9tYWluLCBwYXRoLCBvcHRpb25zKTtcbiAgICBjb25zdCBbY29udHJvbGxlciwgc2V0Q29udHJvbGxlcl0gPSAoMCwgcmVhY3RfMS51c2VTdGF0ZSkoKTtcbiAgICBjb25zdCBbcmVmcmVzaCwgc2V0UmVmcmVzaF0gPSAoMCwgcmVhY3RfMS51c2VTdGF0ZSkoZmFsc2UpO1xuICAgIGNvbnN0IG1hbnVhbFVwZGF0ZSA9ICgwLCByZWFjdF8xLnVzZUNhbGxiYWNrKSgoZGF0YSkgPT4gc2V0RGF0YUxvYWRFcnIoe1xuICAgICAgICBkYXRhLFxuICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IG51bGxcbiAgICB9KSwgW2RhdGFMb2FkRXJyXSk7XG4gICAgLy8gQ2hlY2sgaWYgdGhlIHF1ZXJ5IHByb3AgaGFzIGNoYW5nZWRcbiAgICAoMCwgcmVhY3RfMS51c2VFZmZlY3QpKCgpID0+IHtcbiAgICAgICAgY29udHJvbGxlcj8uYWJvcnQoKTtcbiAgICAgICAgY29uc3QgY3RybCA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICAgICAgY29uc3QgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHJlcShxdWVyeSwge1xuICAgICAgICAgICAgICAgIHNpZ25hbDogY3RybC5zaWduYWwsXG4gICAgICAgICAgICAgICAgb25SZWplY3RlZDogKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBtYW51YWxVcGRhdGUodW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICBzZXREYXRhTG9hZEVycih7IGRhdGE6IHJlcywgbG9hZGluZzogZmFsc2UsIGVycm9yOiBudWxsIH0pO1xuICAgICAgICAgICAgICAgIG9uUmVhZD8uKHJlcyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgb25SZWFkPy4odW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICBzZXREYXRhTG9hZEVycih7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZXJyLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBkZWxheSA/PyAwKTtcbiAgICAgICAgc2V0Q29udHJvbGxlcihjdHJsKTtcbiAgICAgICAgc2V0RGF0YUxvYWRFcnIoeyBkYXRhOiBudWxsLCBsb2FkaW5nOiB0cnVlLCBlcnJvcjogbnVsbCB9KTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGN0cmw/LmFib3J0KCk7XG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICB9O1xuICAgIH0sIFtxdWVyeSwgcmVmcmVzaF0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IGRhdGFMb2FkRXJyLmRhdGEsXG4gICAgICAgIGxvYWRpbmc6IGRhdGFMb2FkRXJyLmxvYWRpbmcsXG4gICAgICAgIGVycm9yOiBkYXRhTG9hZEVyci5lcnJvcixcbiAgICAgICAgbWFudWFsVXBkYXRlLFxuICAgICAgICBmb3JjZVJlZnJlc2g6ICgpID0+IHNldFJlZnJlc2goIXJlZnJlc2gpXG4gICAgfTtcbn07XG5leHBvcnRzLnVzZVF1ZXJ5ID0gdXNlUXVlcnk7XG4vKipcbiAqIFRoZSBxdWVyeSBjb21wb25lbnQgaXMgYSBmZXRjaCB3cmFwcGVyIHRoYXQgYWxsb3dzIHRvIGRpcmVjdGx5IGFkZCBsb2dpYyBpbiB0aGUgZGVzaWduIG9mIHRoZSByZWFjdCBET00gYXJjaGl0ZWN0dXJlXG4gKi9cbmNvbnN0IFF1ZXJ5ID0gKHsgY2hpbGRyZW4sIHF1ZXJ5LCBkZWxheSwgb25SZWFkLCByZXF1ZXN0T3B0aW9ucywgdXNlQ29uZmlnID0gdHJ1ZSB9KSA9PiB7XG4gICAgY29uc3QgeyBkYXRhLCBsb2FkaW5nLCBlcnJvciwgZm9yY2VSZWZyZXNoLCBtYW51YWxVcGRhdGUgfSA9ICgwLCBleHBvcnRzLnVzZVF1ZXJ5KSh7XG4gICAgICAgIHF1ZXJ5LFxuICAgICAgICBkZWxheSxcbiAgICAgICAgb25SZWFkLFxuICAgICAgICByZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgdXNlQ29uZmlnXG4gICAgfSk7XG4gICAgcmV0dXJuICgoMCwganN4X3J1bnRpbWVfMS5qc3gpKEVycm9yQm91bmRhcnlfMS5kZWZhdWx0LCB7IGNoaWxkcmVuOiBjaGlsZHJlbih7IGRhdGEsIGxvYWRpbmcsIGVycm9yLCBtYW51YWxVcGRhdGUsIGZvcmNlUmVmcmVzaCB9KSB9KSk7XG59O1xuZXhwb3J0cy5RdWVyeSA9IFF1ZXJ5O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlF1ZXJ5T3B0aW9uc1Byb3ZpZGVyID0gZXhwb3J0cy51c2VSZXF1ZXN0ID0gZXhwb3J0cy51c2VRdWVyeU9wdGlvbnMgPSB2b2lkIDA7XG5jb25zdCBhcGlfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi91dGlscy9hcGlcIik7XG5jb25zdCByZWFjdF8xID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgcXVlcnlPcHRpb25zQ29udGV4dCA9ICgwLCByZWFjdF8xLmNyZWF0ZUNvbnRleHQpKHtcbiAgICBkb21haW46ICcnLFxuICAgIHBhcmFtZXRlclR5cGU6ICdwYXRoJyxcbiAgICBtb2RlOiAncHJvZHVjdGlvbicsXG4gICAgdmVyYm9zaXR5OiAxLFxuICAgIGlkTmFtZTogJ2lkJyxcbn0pO1xuY29uc3QgdXNlUXVlcnlPcHRpb25zID0gKCkgPT4ge1xuICAgIGNvbnN0IGN0eCA9ICgwLCByZWFjdF8xLnVzZUNvbnRleHQpKHF1ZXJ5T3B0aW9uc0NvbnRleHQpO1xuICAgIGlmICghY3R4KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBjb250ZXh0IGZvciAndXNlUXVlcnlPcHRpb25zJ1wiKTtcbiAgICBpZiAoIWN0eC5pZE5hbWUpXG4gICAgICAgIGN0eC5pZE5hbWUgPSAnaWQnO1xuICAgIHJldHVybiBjdHg7XG59O1xuZXhwb3J0cy51c2VRdWVyeU9wdGlvbnMgPSB1c2VRdWVyeU9wdGlvbnM7XG5jb25zdCB1c2VSZXF1ZXN0ID0gKHsgYm9keTogckJvZHksIGhlYWRlcnM6IHJIZWFkZXJzLCBtZXRob2Q6IHJNZXRob2QgPSAnR0VUJywgbW9kZTogck1vZGUsIG9uUmVqZWN0ZWQ6IHJPblJlamVjdGVkLCBzaWduYWw6IHJTaWduYWwsIH0gPSB7IG1ldGhvZDogJ0dFVCcgfSkgPT4ge1xuICAgIGNvbnN0IHsgZG9tYWluLCBtb2RlOiBxTW9kZSA9IHJNb2RlLCByZXF1ZXN0TWlkZGxld2FyZTogcVJlcXVlc3RNaWRkbGV3YXJlID0gKCkgPT4gckhlYWRlcnMsIG9uUmVqZWN0ZWQ6IHFPblJlamVjdGVkID0gck9uUmVqZWN0ZWQsIH0gPSAoMCwgZXhwb3J0cy51c2VRdWVyeU9wdGlvbnMpKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwYXRoLCBvcHRpb25zID0geyBtZXRob2Q6ICdHRVQnIH0pIHtcbiAgICAgICAgY29uc3QgeyBoZWFkZXJzID0gcVJlcXVlc3RNaWRkbGV3YXJlPy4oKSwgYm9keSA9IHJCb2R5LCBtZXRob2QgPSByTWV0aG9kLCBtb2RlID0gcU1vZGUsIHNpZ25hbCA9IHJTaWduYWwsIG9uUmVqZWN0ZWQgPSBxT25SZWplY3RlZCwgfSA9IG9wdGlvbnM7XG4gICAgICAgIHJldHVybiAoMCwgYXBpXzEucmVxdWVzdCkoZG9tYWluLCBwYXRoLCB7XG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICAgIG1vZGUsXG4gICAgICAgICAgICBzaWduYWwsXG4gICAgICAgICAgICBvblJlamVjdGVkLFxuICAgICAgICB9KTtcbiAgICB9O1xufTtcbmV4cG9ydHMudXNlUmVxdWVzdCA9IHVzZVJlcXVlc3Q7XG5leHBvcnRzLlF1ZXJ5T3B0aW9uc1Byb3ZpZGVyID0gcXVlcnlPcHRpb25zQ29udGV4dC5Qcm92aWRlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VRdWVyeSA9IGV4cG9ydHMudXNlUXVlcnlPcHRpb25zID0gZXhwb3J0cy51c2VSZXF1ZXN0ID0gZXhwb3J0cy5yZXF1ZXN0ID0gZXhwb3J0cy5RdWVyeU9wdGlvbnNQcm92aWRlciA9IGV4cG9ydHMuUXVlcnkgPSBleHBvcnRzLkNSVUQgPSB2b2lkIDA7XG5jb25zdCBDUlVEXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vY29tcG9uZW50cy91dGlscy9DUlVEXCIpKTtcbmV4cG9ydHMuQ1JVRCA9IENSVURfMS5kZWZhdWx0O1xuY29uc3QgUXVlcnlfMSA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvdXRpbHMvUXVlcnlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJRdWVyeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gUXVlcnlfMS5RdWVyeTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInVzZVF1ZXJ5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBRdWVyeV8xLnVzZVF1ZXJ5OyB9IH0pO1xuY29uc3QgUXVlcnlPcHRpb25zUHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvdXRpbHMvUXVlcnlPcHRpb25zUHJvdmlkZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJRdWVyeU9wdGlvbnNQcm92aWRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gUXVlcnlPcHRpb25zUHJvdmlkZXJfMS5RdWVyeU9wdGlvbnNQcm92aWRlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInVzZVF1ZXJ5T3B0aW9uc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gUXVlcnlPcHRpb25zUHJvdmlkZXJfMS51c2VRdWVyeU9wdGlvbnM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ1c2VSZXF1ZXN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBRdWVyeU9wdGlvbnNQcm92aWRlcl8xLnVzZVJlcXVlc3Q7IH0gfSk7XG5jb25zdCBhcGlfMSA9IHJlcXVpcmUoXCIuL3V0aWxzL2FwaVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlcXVlc3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFwaV8xLnJlcXVlc3Q7IH0gfSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVxdWVzdCA9IHZvaWQgMDtcbmNvbnN0IGxvZ18xID0gcmVxdWlyZShcIi4vbG9nXCIpO1xuY29uc3QgcmVxdWVzdCA9IGZ1bmN0aW9uIChkb21haW4sIHBhdGgsIG9wdGlvbnMgPSB7IG1ldGhvZDogJ0dFVCcgfSkge1xuICAgIGNvbnN0IHsgYm9keSwgbWV0aG9kID0gJ0dFVCcsIGhlYWRlcnMsIG1vZGUgPSAncHJvZHVjdGlvbicsIHNpZ25hbCwgb25SZWplY3RlZCwgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgcmVxID0gKGhlYWRlcnMpID0+IHtcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke2RvbWFpbn0vJHtwYXRofWAsIHtcbiAgICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgc2lnbmFsLFxuICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcy5vaykge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXMudGV4dCgpLnRoZW4oKHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoZWFkZXJzPy5bJ0NvbnRlbnQtVHlwZSddID09ICdhcHBsaWNhdGlvbi9qc29uJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgKDAsIGxvZ18xLnF1ZXJ5V2FybikobW9kZSwgMCwgMCwgYENvdWxkIG5vdCBwYXJzZSByZXNwb25zZSB0byBqc29uYCwgcmVzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZXMpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIubmFtZSA9PSAnQWJvcnRFcnJvcicpXG4gICAgICAgICAgICAgICAgKDAsIGxvZ18xLnF1ZXJ5V2FybikobW9kZSwgMCwgMCwgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgKDAsIGxvZ18xLnF1ZXJ5RXJyb3IpKGAke2Vyci51cmx9ICR7ZXJyLnN0YXR1c30gJHtlcnIuc3RhdHVzVGV4dH1gKTtcbiAgICAgICAgICAgICAgICBvblJlamVjdGVkPy4oZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gaGVhZGVycyA/IGhlYWRlcnMudGhlbihyZXEpIDogcmVxKHt9KTtcbn07XG5leHBvcnRzLnJlcXVlc3QgPSByZXF1ZXN0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnF1ZXJ5RXJyb3IgPSBleHBvcnRzLnF1ZXJ5V2FybiA9IGV4cG9ydHMucmVxdWVzdExvZyA9IHZvaWQgMDtcbmNvbnN0IHJlcXVlc3RMb2cgPSAobW9kZSwgcGFyYW1WZXJib3NpdHksIGxpbWl0VmVyYm9zaXR5LCAuLi5zKSA9PiB7XG4gICAgaWYgKG1vZGUgPT0gJ2RldmVsb3BtZW50JyAmJiBsaW1pdFZlcmJvc2l0eSA8PSBwYXJhbVZlcmJvc2l0eSlcbiAgICAgICAgY29uc29sZS5sb2coYFtyZWFjdC1xdWVyeV1gLCAuLi5zKTtcbn07XG5leHBvcnRzLnJlcXVlc3RMb2cgPSByZXF1ZXN0TG9nO1xuY29uc3QgcXVlcnlXYXJuID0gKG1vZGUsIHBhcmFtVmVyYm9zaXR5LCBsaW1pdFZlcmJvc2l0eSwgLi4ucykgPT4ge1xuICAgIGlmIChtb2RlID09ICdkZXZlbG9wbWVudCcgJiYgbGltaXRWZXJib3NpdHkgPD0gcGFyYW1WZXJib3NpdHkpXG4gICAgICAgIGNvbnNvbGUud2FybihgW3JlYWN0LXF1ZXJ5XWAsIC4uLnMpO1xufTtcbmV4cG9ydHMucXVlcnlXYXJuID0gcXVlcnlXYXJuO1xuY29uc3QgcXVlcnlFcnJvciA9ICguLi5zKSA9PiB7XG4gICAgY29uc29sZS5lcnJvcihgW3JlYWN0LXF1ZXJ5XWAsIC4uLnMpO1xufTtcbmV4cG9ydHMucXVlcnlFcnJvciA9IHF1ZXJ5RXJyb3I7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlRm9yY2VVcGRhdGUgPSBleHBvcnRzLmdldFBhdGhUYWlsID0gZXhwb3J0cy5zZXBlcmF0ZSA9IGV4cG9ydHMuc2VwZXJhdGVBbmRLZWVwSWRzID0gZXhwb3J0cy5mb3JtRXh0cmFjdG9yID0gZXhwb3J0cy5nZXRGb3JtRGF0YSA9IHZvaWQgMDtcbmNvbnN0IHJlYWN0XzEgPSByZXF1aXJlKFwicmVhY3RcIik7XG4vKipcbiAqIGdldEZvcm1EYXRhIGV4dHJhY3RzIHRoZSB2YWx1ZXMgb2YgdGhlIGlucHV0IGVsZW1lbnRzXG4gKiByZWNlaXZlZCBmcm9tIHRoZSB0YXJnZXQgb2JqZWN0XG4gKiBAcGFyYW0gdGFyZ2V0IFRhcmdldCByZWNlaXZlZCBmcm9tIHRoZSBvYmplY3QgZXZlbnRcbiAqIEByZXR1cm5zIEFuIG9iamVjdCBvZiB0eXBlIFQgYnkgZGVmYXVsdCB3aXRoIGtleSB2YWx1ZSBwYWlyc1xuICovXG5jb25zdCBnZXRGb3JtRGF0YSA9ICh0YXJnZXQpID0+IHtcbiAgICBjb25zdCB0eXBlZFRhcmdldCA9IHRhcmdldDtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGFyZ2V0KVxuICAgICAgICAubWFwKChrKSA9PiB7XG4gICAgICAgIHJldHVybiB0eXBlZFRhcmdldFtrXTtcbiAgICB9KVxuICAgICAgICAvLyBLZWVwIG5hbWVkIGlucHV0IGFuZCBzZWxlY3RcbiAgICAgICAgLmZpbHRlcigodikgPT4ge1xuICAgICAgICBjb25zdCB0YWcgPSB2LnRhZ05hbWU/LnRvTG9jYWxlTG93ZXJDYXNlPy4oKTtcbiAgICAgICAgcmV0dXJuIHYubmFtZSAmJiAodGFnID09ICdpbnB1dCcgfHwgdGFnID09ICdzZWxlY3QnKTtcbiAgICB9KVxuICAgICAgICAucmVkdWNlKChhY2MsIGN1cikgPT4ge1xuICAgICAgICBjb25zdCB7IG5hbWUsIHZhbHVlLCBjaGVja2VkLCB0eXBlLCByZXF1aXJlZCB9ID0gY3VyO1xuICAgICAgICBjb25zdCBpc0NoZWNrYm94ID0gdHlwZSA9PSAnY2hlY2tib3gnO1xuICAgICAgICBjb25zdCBpc1ZhbEVtcHR5ID0gdmFsdWUgPT0gJycgfHwgdmFsdWUgPT0gbnVsbDtcbiAgICAgICAgaWYgKHJlcXVpcmVkICYmIGlzVmFsRW1wdHkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IHVzZSBhbiBlbXB0eSB2YWx1ZSBmb3IgJHtuYW1lfWApO1xuICAgICAgICBsZXQgZmluYWxWYWx1ZSA9IHR5cGUgPT0gJ251bWJlcicgPyBuZXcgTnVtYmVyKHZhbHVlKS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmFjYyxcbiAgICAgICAgICAgIFtuYW1lXTogaXNDaGVja2JveCA/IGNoZWNrZWQgOiBmaW5hbFZhbHVlLFxuICAgICAgICB9O1xuICAgIH0sIHt9KTtcbn07XG5leHBvcnRzLmdldEZvcm1EYXRhID0gZ2V0Rm9ybURhdGE7XG4vKipcbiAqIEV4dHJhY3RzIGFsbCB0aGUgbmVjZXNzYXJ5IGRhdGEgZnJvbSB0aGUgZm9ybSB0YXJnZXRcbiAqXG4gKiBAcGFyYW0gdGFyZ2V0IFRhcmdldCByZWNlaXZlZCBmcm9tIHRoZSBvYmplY3QgZXZlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIHRoYXQgaWRlbnRpZmllcyB0aGUgZGF0YVxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogZm9ybUV4dHJhY3RvciB3aXRoIGZvcm0gaW5wdXRzXG4gKiBgYGBodG1sXG4gKiA8ZGl2PlxuICogIDxpbnB1dCBuYW1lPVwiaWQtMVwiIC8+XG4gKiAgPGlucHV0IG5hbWU9XCJhZGRyZXNzLTFcIiB2YWx1ZT1cIjIgSGFybGV5IHN0cmVldFwiIC8+XG4gKiA8L2Rpdj5cbiAqIC4uLlxuICogPGRpdj5cbiAqICA8aW5wdXQgbmFtZT1cImlkLW5cIiAvPlxuICogIDxpbnB1dCBuYW1lPVwiYWRkcmVzcy1uXCIgdmFsdWU9XCIzNSBydWUgY2hhbXBzIMOpbHlzw6llc1wiIC8+XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICogYGBgdHlwZXNjcmlwdFxuICogZm9ybUV4dHJhY3Rvcih0YXJnZXQsIFtcImlkXCJdKTtcbiAqIC8vIFtcbiAqIC8vICB7aWQ6IFwiMVwiLCBhZGRyZXNzOiBcIjIgSGFybGV5IHN0cmVldFwifSxcbiAqIC8vICAuLi4sXG4gKiAvLyAge2lkOiBcIm5cIiwgYWRkcmVzczogXCIzNSBydWUgY2hhbXBzIMOpbHlzw6llc1wifVxuICogLy8gXVxuICogYGBgXG4gKlxuICogQHJldHVybnMge0Zvcm1FeHRyYWN0b3JEYXRhfSBGb3JtRXh0cmFjb3JEYXRhXG4gKi9cbmNvbnN0IGZvcm1FeHRyYWN0b3IgPSAodGFyZ2V0LCBuYW1lKSA9PiB7XG4gICAgLy8gR2V0IGFsbCB0aGUgZGF0YSBmcm9tIHRoZSBmb3JtXG4gICAgY29uc3QgZm9ybURhdGEgPSAoMCwgZXhwb3J0cy5nZXRGb3JtRGF0YSkodGFyZ2V0KTtcbiAgICAvLyBTaW1wbHkgY2hlY2sgaWYgdGhlcmUgaXMgbm8gaWQgZm9yIGVhY2ggZm9ybURhdGFcbiAgICBpZiAoZm9ybURhdGFbbmFtZV0gIT0gbnVsbClcbiAgICAgICAgcmV0dXJuIFtmb3JtRGF0YV07XG4gICAgLy8gRWFjaCBmb3JtRGF0YSBpcyBzcGVjaWZpYyB0byBhbiBpZFxuICAgIGNvbnN0IHZhbHVlcyA9IE9iamVjdC5lbnRyaWVzKGZvcm1EYXRhKTtcbiAgICByZXR1cm4gdmFsdWVzLnJlZHVjZSgocHJldiwgY3VycikgPT4ge1xuICAgICAgICBjb25zdCBrZXkgPSBjdXJyWzBdO1xuICAgICAgICBjb25zdCBbYXR0ciwgaWRdID0gKDAsIGV4cG9ydHMuc2VwZXJhdGVBbmRLZWVwSWRzKShba2V5XSlbMF07XG4gICAgICAgIGNvbnN0IGVsZW0gPSBwcmV2LmZpbmQoKGVsZW0pID0+IGVsZW1bbmFtZV0gPT0gaWQpO1xuICAgICAgICBsZXQgcGFyc2VJZCA9IGlkO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcGFyc2VJZCA9IHBhcnNlSW50KGlkKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgICAgIGlmIChlbGVtKVxuICAgICAgICAgICAgZWxlbVthdHRyXSA9IGN1cnJbMV07XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHByZXYucHVzaCh7IFtuYW1lXTogcGFyc2VJZCwgW2F0dHJdOiBjdXJyWzFdIH0pO1xuICAgICAgICByZXR1cm4gcHJldjtcbiAgICB9LCBbXSk7XG59O1xuZXhwb3J0cy5mb3JtRXh0cmFjdG9yID0gZm9ybUV4dHJhY3Rvcjtcbi8qKlxuICogUmVncm91cCBzdHJpbmdzIGJhc2VkIG9uIHRoZWlyIGlkcyByZXByZXNlbnRlZCBieSB0aGUgbGFzdCBzZXBlcmF0aW9uIG9mIHRoZSBzdHJpbmdcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIHNlcGVyYXRlQW5kS2VlcElkcyhcImhlbGxvV29ybGQ1XCIsXCJoZWxsby13b3JsZDZcIiwgXCJoZWxsb1dvcmxkN1wiLCBcImhlbGxvV29ybGRcIik7XG4gKiAvLyBbW1wiaGVsbG9Xb3JsZFwiLCBcIjVcIl0sIFtcImhlbGxvLXdvcmxkXCIsIFwiNlwiXSwgW1wiaGVsbG9Xb3JsZFwiLCBcIjdcIl0sIFtcImhlbGxvXCIsIFwiV29ybGRcIl1dXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gc3RycyBUaGUgc3RyaW5nIGFycmF5IHRvIHNlYXJjaCBmb3IgaWRzIGFuZCByZWdyb3VwIGFsbCBhdHRyaWJ1dGVzIHdpdGggdGhlIHNhbWUgaWRzXG4gKiBAcmV0dXJucyBBbmQgYXJyYXkgb2YgYXJyYXlzIGVhY2ggY29udGFpbmluZyB0aGUgcGFyc2VkIG5hbWUgYW5kIGlkIG9mIHRoZSBzdHJpbmdcbiAqL1xuY29uc3Qgc2VwZXJhdGVBbmRLZWVwSWRzID0gKHN0cnMpID0+IHtcbiAgICByZXR1cm4gKDAsIGV4cG9ydHMuc2VwZXJhdGUpKHN0cnMpLm1hcCgodikgPT4ge1xuICAgICAgICBjb25zdCBzZXBlcmF0ZWQgPSB2WzFdO1xuICAgICAgICBjb25zdCBpZCA9IHNlcGVyYXRlZFtzZXBlcmF0ZWQubGVuZ3RoIC0gMV07XG4gICAgICAgIHJldHVybiBbdlswXS5yZXBsYWNlKG5ldyBSZWdFeHAoYCgtfF8pPyR7aWR9JGApLCAnJyksIGlkXTtcbiAgICB9KTtcbn07XG5leHBvcnRzLnNlcGVyYXRlQW5kS2VlcElkcyA9IHNlcGVyYXRlQW5kS2VlcElkcztcbi8qKlxuICogVGhpcyBmdW5jdGlvbiBzZXBlcmF0ZXMgc3RyaW5ncyBiYXNlZCBvbiBzcGVjaWFsIGNoYXJhY3RlcnMgLyBjYXNlXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBzZXBlcmF0ZShbXCJoZWxsby13b3JsZFwiLCBcImhlbGxvV29ybGQyXCIsIFwiaGVsbG9fd29ybGRfMlwiXSlcbiAqIC8vIFtcbiAqIC8vICAgW1wiaGVsbG8td29ybGRcIiwgW1wiaGVsbG9cIixcIndvcmxkXCJdXSxcbiAqIC8vICAgW1wiaGVsbG9Xb3JsZDJcIiwgW1wiaGVsbG9cIixcIndvcmxkXCIsIFwiMlwiXV0sXG4gKiAvLyAgIFtcImhlbGxvX3dvcmxkXzJcIiwgW1wiaGVsbG9cIiwgXCJ3b3JsZFwiLCBcIjJcIl1dXG4gKiAvLyBdXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gc3RycyBUaGUgc3RyaW5nIGFycmF5IHRvIHRyeSBzZXBlcmF0ZVxuICogQHJldHVybnMgQW4gYXJyYXkgb2YgYXJyYXlzIHdpdGggdGhlIGlucHV0IC8gb3V0cHV0IHN0cmluZ3NcbiAqL1xuY29uc3Qgc2VwZXJhdGUgPSAoc3RycykgPT4ge1xuICAgIHJldHVybiBzdHJzLm1hcCgoc3RyKSA9PiB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBzdHIsXG4gICAgICAgICAgICBzdHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvKFswLTldKykvLCAnICQxJylcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvKC18XykvZywgJyAnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oW0EtWl0pL2csICcgJDEnKVxuICAgICAgICAgICAgICAgIC50cmltKClcbiAgICAgICAgICAgICAgICAudG9Mb2NhbGVMb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgIC5zcGxpdCgnICcpXG4gICAgICAgICAgICAgICAgLmZpbHRlcigocykgPT4gcyAhPSAnJyksXG4gICAgICAgIF07XG4gICAgfSk7XG59O1xuZXhwb3J0cy5zZXBlcmF0ZSA9IHNlcGVyYXRlO1xuY29uc3QgZ2V0UGF0aFRhaWwgPSAoZGF0YSwgdHlwZSwgbmFtZSwgcGF0aFRhaWwpID0+IHtcbiAgICBjb25zdCBpZCA9IGRhdGFbbmFtZV07XG4gICAgaWYgKHR5cGUgPT0gJ3BhdGgnICYmIGlkICE9ICcnICYmIGlkICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aFRhaWw7XG59O1xuZXhwb3J0cy5nZXRQYXRoVGFpbCA9IGdldFBhdGhUYWlsO1xuY29uc3QgdXNlRm9yY2VVcGRhdGUgPSAoKSA9PiB7XG4gICAgcmV0dXJuICgwLCByZWFjdF8xLnVzZVJlZHVjZXIpKCgpID0+ICh7fSksIHt9KVsxXTtcbn07XG5leHBvcnRzLnVzZUZvcmNlVXBkYXRlID0gdXNlRm9yY2VVcGRhdGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGRvIG5vdCBlZGl0IC5qcyBmaWxlcyBkaXJlY3RseSAtIGVkaXQgc3JjL2luZGV4LmpzdFxuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSAmJiBiICYmIHR5cGVvZiBhID09ICdvYmplY3QnICYmIHR5cGVvZiBiID09ICdvYmplY3QnKSB7XG4gICAgaWYgKGEuY29uc3RydWN0b3IgIT09IGIuY29uc3RydWN0b3IpIHJldHVybiBmYWxzZTtcblxuICAgIHZhciBsZW5ndGgsIGksIGtleXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICAgIGxlbmd0aCA9IGEubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCAhPSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KVxuICAgICAgICBpZiAoIWVxdWFsKGFbaV0sIGJbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cblxuXG4gICAgaWYgKGEuY29uc3RydWN0b3IgPT09IFJlZ0V4cCkgcmV0dXJuIGEuc291cmNlID09PSBiLnNvdXJjZSAmJiBhLmZsYWdzID09PSBiLmZsYWdzO1xuICAgIGlmIChhLnZhbHVlT2YgIT09IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZikgcmV0dXJuIGEudmFsdWVPZigpID09PSBiLnZhbHVlT2YoKTtcbiAgICBpZiAoYS50b1N0cmluZyAhPT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZykgcmV0dXJuIGEudG9TdHJpbmcoKSA9PT0gYi50b1N0cmluZygpO1xuXG4gICAga2V5cyA9IE9iamVjdC5rZXlzKGEpO1xuICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIGlmIChsZW5ndGggIT09IE9iamVjdC5rZXlzKGIpLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KVxuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwga2V5c1tpXSkpIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghZXF1YWwoYVtrZXldLCBiW2tleV0pKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyB0cnVlIGlmIGJvdGggTmFOLCBmYWxzZSBvdGhlcndpc2VcbiAgcmV0dXJuIGEhPT1hICYmIGIhPT1iO1xufTtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IGRlZmF1bHQge1wiYnV0dG9uLWRlZmF1bHRcIjpcIk4zNG9hRGdIdEpscHRxeFZ2OVBuXCIsXCJidXR0b24tc2VsZWN0ZWRcIjpcIkphMG92T19oM2VhRXNhYm9xREM3XCIsXCJidXR0b24tcHJpbWFyeVwiOlwiS1RmdUxFN0xuU0dSSERGUEQwRUFcIixcImJ1dHRvbi12YWxpZGF0ZVwiOlwialk5TUlIeU83VDhXX1FOcGZ4MGtcIixcImJ1dHRvbi1pbnZlcnNlXCI6XCJtNDB3Ym51Smg2N1h4bVljdEpMUlwiLFwiYnV0dG9uLWlnbm9yZVwiOlwiWmVJamhMVnZ3MEpxanVSOGtZalRcIixcImJ1dHRvbi1pbnZhbGlkXCI6XCJaZWRqZURrRnpvNkpjQUd4eVpQblwiLFwiYnV0dG9uLXZhbGlkXCI6XCJKazdmNzZYcFA3U0xEOTJMdm1NM1wiLFwibWFpblwiOlwiU0lBcHhRelFsWnAwTDFnTjBfUVdcIn07IiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBmPXJlcXVpcmUoXCJyZWFjdFwiKSxrPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLGw9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLG09T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxuPWYuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQuUmVhY3RDdXJyZW50T3duZXIscD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gcShjLGEsZyl7dmFyIGIsZD17fSxlPW51bGwsaD1udWxsO3ZvaWQgMCE9PWcmJihlPVwiXCIrZyk7dm9pZCAwIT09YS5rZXkmJihlPVwiXCIrYS5rZXkpO3ZvaWQgMCE9PWEucmVmJiYoaD1hLnJlZik7Zm9yKGIgaW4gYSltLmNhbGwoYSxiKSYmIXAuaGFzT3duUHJvcGVydHkoYikmJihkW2JdPWFbYl0pO2lmKGMmJmMuZGVmYXVsdFByb3BzKWZvcihiIGluIGE9Yy5kZWZhdWx0UHJvcHMsYSl2b2lkIDA9PT1kW2JdJiYoZFtiXT1hW2JdKTtyZXR1cm57JCR0eXBlb2Y6ayx0eXBlOmMsa2V5OmUscmVmOmgscHJvcHM6ZCxfb3duZXI6bi5jdXJyZW50fX1leHBvcnRzLkZyYWdtZW50PWw7ZXhwb3J0cy5qc3g9cTtleHBvcnRzLmpzeHM9cTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xNTZfXzsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNzYpO1xuIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJkZWZpbmUiLCJhbWQiLCJzZWxmIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMTU2X18iLCJfX2ltcG9ydERlZmF1bHQiLCJ0aGlzIiwibW9kIiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJqc3hfcnVudGltZV8xIiwiYXBpXzEiLCJsb2dfMSIsInV0aWxfMSIsIkVycm9yQm91bmRhcnlfMSIsIlF1ZXJ5XzEiLCJRdWVyeU9wdGlvbnNQcm92aWRlcl8xIiwiZmFzdF9kZWVwX2VxdWFsXzEiLCJyZWFjdF8xIiwiY2hpbGRyZW4iLCJlbmRQb2ludHMiLCJvbkNyZWF0ZWQiLCJvblJlYWQiLCJvblVwZGF0ZWQiLCJvbkRlbGV0ZWQiLCJkZWxheSIsInR5cGUiLCJjcmVhdGVFbmRwb2ludCIsInJlYWRFbmRwb2ludCIsInVwZGF0ZUVuZHBvaW50IiwiZGVsZXRlRW5kcG9pbnQiLCJBcnJheSIsImZpbGwiLCJjcmVhdGUiLCJyZWFkIiwidXBkYXRlIiwiZGVsZXRlIiwicGFyYW1ldGVyVHlwZSIsImRvbWFpbiIsInJlcXVlc3RNaWRkbGV3YXJlIiwibW9kZSIsInZlcmJvc2l0eSIsImlkTmFtZSIsInVzZVF1ZXJ5T3B0aW9ucyIsInVzZUVmZmVjdCIsInJlcXVlc3RMb2ciLCJqc3giLCJkZWZhdWx0IiwiUXVlcnkiLCJxdWVyeSIsImRhdGEiLCJsb2FkaW5nIiwiZXJyb3IiLCJtYW51YWxVcGRhdGUiLCJmb3JjZVJlZnJlc2giLCJGcmFnbWVudCIsImhhbmRsZUNyZWF0ZSIsImUiLCJwYXJhbXMiLCJtZXRob2QiLCJwcmV2ZW50RGVmYXVsdCIsInBhdGhUYWlsIiwiZm9ybURhdGEiLCJnZXRGb3JtRGF0YSIsInRhcmdldCIsImVuZHBvaW50IiwicmVxdWVzdCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiaGVhZGVycyIsInRoZW4iLCJjcmVhdGVkIiwiY2F0Y2giLCJjb25zb2xlIiwiaGFuZGxlVXBkYXRlIiwibmFtZSIsImZvcm1EYXRhcyIsImZvcm1FeHRyYWN0b3IiLCJuZXdEYXRhIiwicHJvbWlzZXMiLCJmb3JFYWNoIiwidGFpbCIsImdldFBhdGhUYWlsIiwiaGFzQ2hhbmdlZCIsImluZGV4IiwiZmluZEluZGV4IiwidmFsIiwidW5kZWZpbmVkIiwibWVyZ2VkRGF0YSIsInB1c2giLCJQcm9taXNlIiwiYWxsIiwiaGFuZGxlRGVsZXRlIiwic3RvcFByb3BhZ2F0aW9uIiwiaWQiLCJ0b1N0cmluZyIsInR5cGVkRGF0YSIsIm5ld0FyciIsInNsaWNlIiwibGVuZ3RoIiwiaW5kZXhfbW9kdWxlX3Njc3NfMSIsIkVycm9yQm91bmRhcnkiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInN1cGVyIiwiYXJndW1lbnRzIiwic3RhdGUiLCJoYXNFcnJvciIsImluZm8iLCJjb21wb25lbnREaWRDYXRjaCIsInNldFN0YXRlIiwicmVuZGVyIiwicHJvcHMiLCJqc3hzIiwiY2xhc3NOYW1lIiwibWFpbiIsIm1lc3NhZ2UiLCJjb21wb25lbnRTdGFjayIsInVzZVF1ZXJ5IiwicmVxdWVzdE9wdGlvbnMiLCJ1c2VDb25maWciLCJkYXRhTG9hZEVyciIsInNldERhdGFMb2FkRXJyIiwidXNlU3RhdGUiLCJvblJlamVjdGVkIiwick9uUmVqZWN0ZWQiLCJxT25SZWplY3RlZCIsInJlcSIsInVzZVJlcXVlc3QiLCJwYXRoIiwib3B0aW9ucyIsImNvbnRyb2xsZXIiLCJzZXRDb250cm9sbGVyIiwicmVmcmVzaCIsInNldFJlZnJlc2giLCJ1c2VDYWxsYmFjayIsImFib3J0IiwiY3RybCIsIkFib3J0Q29udHJvbGxlciIsInRpbWVvdXQiLCJ3aW5kb3ciLCJzZXRUaW1lb3V0Iiwic2lnbmFsIiwicmVzIiwiZXJyIiwiY2xlYXJUaW1lb3V0IiwiUXVlcnlPcHRpb25zUHJvdmlkZXIiLCJxdWVyeU9wdGlvbnNDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsImN0eCIsInVzZUNvbnRleHQiLCJFcnJvciIsInJCb2R5IiwickhlYWRlcnMiLCJyTWV0aG9kIiwick1vZGUiLCJyU2lnbmFsIiwicU1vZGUiLCJxUmVxdWVzdE1pZGRsZXdhcmUiLCJQcm92aWRlciIsIkNSVUQiLCJDUlVEXzEiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZmV0Y2giLCJvayIsInRleHQiLCJ0IiwicGFyc2UiLCJxdWVyeVdhcm4iLCJyZWplY3QiLCJxdWVyeUVycm9yIiwidXJsIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsInBhcmFtVmVyYm9zaXR5IiwibGltaXRWZXJib3NpdHkiLCJzIiwibG9nIiwid2FybiIsInVzZUZvcmNlVXBkYXRlIiwic2VwZXJhdGUiLCJzZXBlcmF0ZUFuZEtlZXBJZHMiLCJ0eXBlZFRhcmdldCIsImtleXMiLCJtYXAiLCJrIiwiZmlsdGVyIiwidiIsInRhZyIsInRhZ05hbWUiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsInJlZHVjZSIsImFjYyIsImN1ciIsImNoZWNrZWQiLCJyZXF1aXJlZCIsImlzQ2hlY2tib3giLCJmaW5hbFZhbHVlIiwiTnVtYmVyIiwidmFsdWVPZiIsImVudHJpZXMiLCJwcmV2IiwiY3VyciIsImtleSIsImF0dHIiLCJlbGVtIiwiZmluZCIsInBhcnNlSWQiLCJwYXJzZUludCIsInN0cnMiLCJzZXBlcmF0ZWQiLCJyZXBsYWNlIiwiUmVnRXhwIiwic3RyIiwidHJpbSIsInNwbGl0IiwidXNlUmVkdWNlciIsImVxdWFsIiwiYSIsImIiLCJpIiwiaXNBcnJheSIsInNvdXJjZSIsImZsYWdzIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZiIsIlN5bWJvbCIsImZvciIsImwiLCJtIiwibiIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50T3duZXIiLCJwIiwicmVmIiwiX19zZWxmIiwiX19zb3VyY2UiLCJxIiwiYyIsImciLCJkIiwiaCIsImRlZmF1bHRQcm9wcyIsIiQkdHlwZW9mIiwiX293bmVyIiwiY3VycmVudCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkZWZpbml0aW9uIiwibyIsIm9iaiIsInByb3AiLCJyIiwidG9TdHJpbmdUYWciXSwic291cmNlUm9vdCI6IiJ9