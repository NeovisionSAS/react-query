/*! For license information please see module.js.LICENSE.txt */
!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r(require("react")):"function"==typeof define&&define.amd?define(["react"],r):"object"==typeof exports?exports["react-query"]=r(require("react")):e["react-query"]=r(e.react)}(self,(e=>(()=>{"use strict";var r={63:e=>{e.exports=function e(r,t){if(r===t)return!0;if(r&&t&&"object"==typeof r&&"object"==typeof t){if(r.constructor!==t.constructor)return!1;var o,n,a;if(Array.isArray(r)){if((o=r.length)!=t.length)return!1;for(n=o;0!=n--;)if(!e(r[n],t[n]))return!1;return!0}if(r.constructor===RegExp)return r.source===t.source&&r.flags===t.flags;if(r.valueOf!==Object.prototype.valueOf)return r.valueOf()===t.valueOf();if(r.toString!==Object.prototype.toString)return r.toString()===t.toString();if((o=(a=Object.keys(r)).length)!==Object.keys(t).length)return!1;for(n=o;0!=n--;)if(!Object.prototype.hasOwnProperty.call(t,a[n]))return!1;for(n=o;0!=n--;){var s=a[n];if(!e(r[s],t[s]))return!1}return!0}return r!=r&&t!=t}},251:(e,r,t)=>{var o=t(156),n=Symbol.for("react.element"),a=Symbol.for("react.fragment"),s=Object.prototype.hasOwnProperty,d=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,i={key:!0,ref:!0,__self:!0,__source:!0};function c(e,r,t){var o,a={},c=null,l=null;for(o in void 0!==t&&(c=""+t),void 0!==r.key&&(c=""+r.key),void 0!==r.ref&&(l=r.ref),r)s.call(r,o)&&!i.hasOwnProperty(o)&&(a[o]=r[o]);if(e&&e.defaultProps)for(o in r=e.defaultProps)void 0===a[o]&&(a[o]=r[o]);return{$$typeof:n,type:e,key:c,ref:l,props:a,_owner:d.current}}r.Fragment=a,r.jsx=c,r.jsxs=c},893:(e,r,t)=>{e.exports=t(251)},156:r=>{r.exports=e}},t={};function o(e){var n=t[e];if(void 0!==n)return n.exports;var a=t[e]={exports:{}};return r[e](a,a.exports,o),a.exports}o.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return o.d(r,{a:r}),r},o.d=(e,r)=>{for(var t in r)o.o(r,t)&&!o.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},o.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};return(()=>{o.r(n),o.d(n,{CRUD:()=>$,Query:()=>v,QueryOptionsProvider:()=>y,request:()=>a,useQuery:()=>g,useQueryOptions:()=>h,useRequest:()=>m});var e=o(893);const r=(e,r,t,...o)=>{"development"==e&&t<=r&&console.log("[react-query]",...o)},t=(e,r,t,...o)=>{"development"==e&&t<=r&&console.warn("[react-query]",...o)},a=function(e,r,o={method:"GET"}){const{method:n="GET",headers:a,mode:s="production",onRejected:d,...i}=o,c=o=>fetch(`${e}/${r}`,{headers:o,method:n,...i}).then((e=>e.ok?e.text().then((r=>{try{if(e.headers.get("Content-Type")?.includes("application/json"))return JSON.parse(r)}catch(r){t(s,0,0,"Could not parse response to json",e)}return r})):(((...e)=>{console.error("[react-query]",...e)})(`${e.url} ${e.status} ${e.statusText}`),d?.(e),Promise.reject(`${e.status} ${e.statusText}`)))).catch((e=>{if(console.log(e),"AbortError"!=e.name)throw new Error(e);t(s,0,0,e.message)}));return a?a().then(c):c({})};var s=o(156),d=o.n(s);const i=e=>{const r=e;return Object.keys(e).map((e=>r[e])).filter((e=>{const r=e.tagName?.toLocaleLowerCase?.();return e.name&&("input"==r||"select"==r)})).reduce(((e,r)=>{const{name:t,value:o,checked:n,type:a,required:s}=r,d="checkbox"==a;if(s&&(""==o||null==o))throw new Error(`Can't use an empty value for ${t}`);let i="number"==a?new Number(o).valueOf():o;return{...e,[t]:d?n:i}}),{})},c=e=>e.map((e=>[e,e.replace(/([0-9]+)/," $1").replace(/(-|_)/g," ").replace(/([A-Z])/g," $1").trim().toLocaleLowerCase().split(" ").filter((e=>""!=e))])),l=(e,r,t,o)=>{const n=e[t];return"path"==r&&""!=n&&null!=n?n:o??""};class u extends d().Component{state={hasError:!1,error:{e:void 0,info:void 0}};componentDidCatch=(e,r)=>{console.error(e),this.setState({hasError:!0,error:{e,info:r}})};render(){const{children:r}=this.props,{hasError:t,error:o}=this.state;return t?(0,e.jsxs)("div",{className:"SIApxQzQlZp0L1gN0_QW",children:[(0,e.jsx)("div",{children:o?.e?.message}),(0,e.jsx)("hr",{}),(0,e.jsx)("div",{children:o?.info?.componentStack})]}):(0,e.jsx)(d().Fragment,{children:r})}}const p=u,f=(0,s.createContext)({domain:"",parameterType:"path",mode:"production",verbosity:1,idName:"id"}),h=()=>{const e=(0,s.useContext)(f);if(!e)throw new Error("No context for 'useQueryOptions'");return e.idName||(e.idName="id"),e},m=({method:e="GET",...r}={method:"GET"})=>{const{domain:t,loader:o,...n}=h();return(e,o={method:"GET"})=>a(t,e,Object.merge(r,n,o))},y=f.Provider,g=({query:e,delay:r,onRead:t,requestOptions:o={},useConfig:n=!0})=>{const[d,i]=(0,s.useState)({data:void 0,loading:!0,error:void 0}),{domain:c="",...l}=o;let u;u=n?m(h()):(e,r)=>a(c,e,r);const[p,f]=(0,s.useState)(),[y,g]=(0,s.useState)(!1),v=(0,s.useCallback)((e=>i({data:e,loading:!1,error:void 0})),[]);return(0,s.useEffect)((()=>{p?.abort();const o=new AbortController,n=window.setTimeout((()=>{const{signal:r,...n}=l;u(e,{signal:r??o.signal,...n}).then((e=>{i({data:e,loading:!1,error:void 0}),t?.(e)})).catch((e=>{i({data:void 0,loading:!1,error:e.toString()})}))}),r??0);return f(o),i({data:void 0,loading:!0,error:void 0}),()=>{o?.abort(),window.clearTimeout(n)}}),[e,y]),{...d,manualUpdate:v,forceRefresh:()=>g(!y)}},v=({children:r,useConfig:t=!0,...o})=>{const{loader:n}=h(),{loading:a,...s}=g({...o,useConfig:t}),d=r({loading:a,...s});return(0,e.jsx)(p,{children:a&&n.autoload?(0,e.jsx)(e.Fragment,{children:n.loader??(0,e.jsx)("div",{children:"Loading data..."})}):d})};var b=o(63),x=o.n(b);const $=({children:t,endPoints:o,onCreated:n,onRead:d,onUpdated:u,onDeleted:f,delay:m,type:y="array"})=>{const[g,b,$,O]="string"==typeof o?new Array(4).fill(o):[o.create,o.read,o.update,o.delete],{parameterType:j,domain:E,requestMiddleware:S,mode:T,verbosity:w,idName:_}=h();return(0,s.useEffect)((()=>{r(T,w,5,"[endpoints]",`[C]${g}`,`[R]${b}`,`[U]${$}`,`[D]${O}`)}),[g,b,$,O]),(0,e.jsx)(p,{children:(0,e.jsx)(v,{query:`${b}`,delay:m,onRead:d,children:({data:o,loading:d,error:p,manualUpdate:h,forceRefresh:m})=>(0,e.jsx)(s.Fragment,{children:t({handleCreate:(e,t={method:"POST"})=>{e.preventDefault();const{method:s="POST",pathTail:d}=t,c=i(e.target),l=`${g}/${d?`${d}/`:""}`;return r(T,w,1,`[create][${s}]`,`${E}/${l}`,c),a(E,l,{body:JSON.stringify(c),method:s,headers:S,mode:T}).then((e=>{h?.([...o,e]),n?.()&&m?.()})).catch((()=>{console.error("Erreur de création","Une erreur est survenu lors de la création dans la base de données")}))},read:{data:o,loading:d,error:p},handleUpdate:(e,t={method:"PUT",name:_})=>{e.preventDefault();const{method:n="PUT",pathTail:s,name:d=_}=t,p=((e,r)=>{const t=i(e);return null!=t[r]?[t]:Object.entries(t).reduce(((e,t)=>{const o=t[0],[n,a]=(d=[o],c(d).map((e=>{const r=e[1],t=r[r.length-1];return[e[0].replace(new RegExp(`(-|_)?${t}$`),""),t]})))[0],s=e.find((e=>e[r]==a));var d;let i=a;try{i=parseInt(a)}catch(e){}return s?s[n]=t[1]:e.push({[r]:i,[n]:t[1]}),e}),[])})(e.target,d);let f;f="array"==y?[...o]:o;const g=[];return p.forEach((e=>{const t=l(e,j,d,s),i=`${$}/${t?`${t}/`:""}`;let c=!1;if("array"==y){const r=f.findIndex((e=>e[d]==t));if(null!=r){const t={...f[r],...e};c=!x()(f[r],t),f[r]=t}else f.push(e)}else c=!x()(f,o),f={...f,...e};c&&(r(T,w,1,`[update][${n}]`,`${E}/${i}`,e),g.push(a(E,i,{body:JSON.stringify(e),method:n,headers:S,mode:T})))})),Promise.all(g).then((()=>{h?.(f),u?.()&&m?.()}))},handleDelete:(e,t={method:"DELETE",name:_})=>{e?.preventDefault(),e?.stopPropagation();const{method:n="DELETE",pathTail:s,name:d=_,id:c}=t,u=l({[d]:c?.toString()??""},j,d,s),p=`${O}/${u?`${u}/`:""}`;return r(T,w,1,`[delete][${n}]`,`${E}/${p}`),a(E,p,{method:n,headers:S,mode:T,body:"path"==j?"":JSON.stringify(i(e.target))}).then((()=>{if("array"==y){const e=o.findIndex((e=>e[d]==c)),t=o;r(T,w,3,`Removing index ${e}`);const n=[...t.slice(0,e),...t.slice(e+1,t.length)];r(T,w,4,"Array updated",n),h?.(n)}else h?.(o);f?.()&&m?.()}))}},m)})})})}})(),n})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,