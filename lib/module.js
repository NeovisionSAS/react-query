/*! For license information please see module.js.LICENSE.txt */
!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r(require("react")):"function"==typeof define&&define.amd?define(["react"],r):"object"==typeof exports?exports["react-query"]=r(require("react")):e["react-query"]=r(e.react)}(self,(e=>(()=>{"use strict";var r={63:e=>{e.exports=function e(r,t){if(r===t)return!0;if(r&&t&&"object"==typeof r&&"object"==typeof t){if(r.constructor!==t.constructor)return!1;var o,n,a;if(Array.isArray(r)){if((o=r.length)!=t.length)return!1;for(n=o;0!=n--;)if(!e(r[n],t[n]))return!1;return!0}if(r.constructor===RegExp)return r.source===t.source&&r.flags===t.flags;if(r.valueOf!==Object.prototype.valueOf)return r.valueOf()===t.valueOf();if(r.toString!==Object.prototype.toString)return r.toString()===t.toString();if((o=(a=Object.keys(r)).length)!==Object.keys(t).length)return!1;for(n=o;0!=n--;)if(!Object.prototype.hasOwnProperty.call(t,a[n]))return!1;for(n=o;0!=n--;){var s=a[n];if(!e(r[s],t[s]))return!1}return!0}return r!=r&&t!=t}},251:(e,r,t)=>{var o=t(156),n=Symbol.for("react.element"),a=Symbol.for("react.fragment"),s=Object.prototype.hasOwnProperty,d=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,i={key:!0,ref:!0,__self:!0,__source:!0};function c(e,r,t){var o,a={},c=null,l=null;for(o in void 0!==t&&(c=""+t),void 0!==r.key&&(c=""+r.key),void 0!==r.ref&&(l=r.ref),r)s.call(r,o)&&!i.hasOwnProperty(o)&&(a[o]=r[o]);if(e&&e.defaultProps)for(o in r=e.defaultProps)void 0===a[o]&&(a[o]=r[o]);return{$$typeof:n,type:e,key:c,ref:l,props:a,_owner:d.current}}r.Fragment=a,r.jsx=c,r.jsxs=c},893:(e,r,t)=>{e.exports=t(251)},156:r=>{r.exports=e}},t={};function o(e){var n=t[e];if(void 0!==n)return n.exports;var a=t[e]={exports:{}};return r[e](a,a.exports,o),a.exports}o.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return o.d(r,{a:r}),r},o.d=(e,r)=>{for(var t in r)o.o(r,t)&&!o.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},o.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};return(()=>{o.r(n),o.d(n,{CRUD:()=>x,Query:()=>b,QueryOptionsProvider:()=>g,request:()=>u,useQuery:()=>v,useQueryOptions:()=>h,useRequest:()=>y});var e=o(893);const r=(e,r,t,...o)=>{"development"==e&&t<=r&&console.log("[react-query]",...o)},t=(e,r,t,...o)=>{"development"==e&&t<=r&&console.warn("[react-query]",...o)};var a=o(156),s=o.n(a);const d=e=>{const r=e;return Object.keys(e).map((e=>r[e])).filter((e=>{const r=e.tagName?.toLocaleLowerCase?.();return e.name&&("input"==r||"select"==r)})).reduce(((e,r)=>{const{name:t,value:o,checked:n,type:a,required:s}=r,d="checkbox"==a;if(s&&(""==o||null==o))throw new Error(`Can't use an empty value for ${t}`);let i="number"==a?new Number(o).valueOf():o;return{...e,[t]:d?n:i}}),{})},i=e=>e.map((e=>[e,e.replace(/([0-9]+)/," $1").replace(/(-|_)/g," ").replace(/([A-Z])/g," $1").trim().toLocaleLowerCase().split(" ").filter((e=>""!=e))])),c=(e,r,t,o)=>{const n=e[t];return"path"==r&&""!=n&&null!=n?n:o??""},l=(e,r)=>r?Object.merge(e,{"Content-Type":r}):"multipart/form-data"==r?Object.exclude(e,"Content-Type"):e,u=function(e,r,o={method:"GET"}){const{method:n="GET",headers:a,mode:s="production",onRejected:i,data:c,...u}=o,{body:p,contentType:f}=(e=>null==e||"string"==typeof e?{body:e}:"FormData"==e.constructor.name?{body:e,contentType:"multipart/form-data"}:{body:JSON.stringify(d(e.target)),contentType:"application/x-www-form-urlencoded"})(c),m=o=>fetch(`${e}/${r}`,{headers:l(o,f),method:n,body:p,...u}).then((e=>e.ok?e.text().then((r=>{try{if(e.headers.get("Content-Type")?.includes("application/json"))return JSON.parse(r)}catch(r){t(s,0,0,"Could not parse response to json",e)}return r})):(((...e)=>{console.error("[react-query]",...e)})(`${e.url} ${e.status} ${e.statusText}`),i?.(e),Promise.reject(`${e.status} ${e.statusText}`)))).catch((e=>{if("AbortError"!=e.name)throw new Error(e);t(s,0,0,e.message)}));return a?a().then(m):m({})};class p extends s().Component{state={hasError:!1,error:{e:void 0,info:void 0}};componentDidCatch=(e,r)=>{console.error(e),this.setState({hasError:!0,error:{e,info:r}})};render(){const{children:r}=this.props,{hasError:t,error:o}=this.state;return t?(0,e.jsxs)("div",{className:"SIApxQzQlZp0L1gN0_QW",children:[(0,e.jsx)("div",{children:o?.e?.message}),(0,e.jsx)("hr",{}),(0,e.jsx)("div",{children:o?.info?.componentStack})]}):(0,e.jsx)(s().Fragment,{children:r})}}const f=p,m=(0,a.createContext)({domain:"",parameterType:"path",mode:"production",verbosity:1,idName:"id"}),h=()=>{const e=(0,a.useContext)(m);if(!e)throw new Error("No context for 'useQueryOptions'");return e.idName||(e.idName="id"),e},y=(e={method:"GET"})=>{const{loader:r,...t}=h(),o=Object.merge(e,t);return(e,r={method:"GET"})=>{const{domain:t,...n}=Object.merge(o,r);return u(t,e,n)}},g=m.Provider,v=({query:e,delay:t,onRead:o,requestOptions:n={}})=>{const[s,d]=(0,a.useState)({data:void 0,loading:!0,error:void 0}),i=Object.merge(h(),n),{domain:c,mode:l,verbosity:p}=i,[f,m]=(0,a.useState)(),[y,g]=(0,a.useState)(!1),v=(0,a.useCallback)((e=>d({data:e,loading:!1,error:void 0})),[]);return(0,a.useEffect)((()=>{r(l,p,8,`[read][${e}]`,`${c}/${e}`),f?.abort();const n=new AbortController,a=window.setTimeout((()=>{const{signal:r,...t}=i;((e,r)=>u(c,e,r))(e,{signal:n.signal,...t}).then((e=>{e&&(d({data:e,loading:!1,error:void 0}),o?.(e))})).catch((e=>{d({data:void 0,loading:!1,error:e.toString()})}))}),t??0);return m(n),d({data:void 0,loading:!0,error:void 0}),()=>{n?.abort(),window.clearTimeout(a)}}),[e,y]),{...s,manualUpdate:v,forceRefresh:()=>g(!y)}},b=({children:r,...t})=>{const{loader:o}=h(),{loading:n,...a}=v(t),s=r({loading:n,...a});return(0,e.jsx)(f,{children:n&&o&&o.autoload?(0,e.jsx)(e.Fragment,{children:o.loader??(0,e.jsx)("div",{children:"Loading data..."})}):s})};var O=o(63),$=o.n(O);const x=({children:t,endPoints:o,onCreated:n,onRead:s,onUpdated:l,onDeleted:p,delay:m,type:y="array"})=>{const[g,v,O,x]="string"==typeof o?new Array(4).fill(o):[o.create,o.read,o.update,o.delete],{parameterType:j,domain:T,headers:E,mode:S,verbosity:w,idName:_}=h();return(0,a.useEffect)((()=>{r(S,w,5,"[endpoints]",`[C]${g}`,`[R]${v}`,`[U]${O}`,`[D]${x}`)}),[g,v,O,x]),(0,e.jsx)(f,{children:(0,e.jsx)(b,{query:`${v}`,delay:m,onRead:s,children:({data:o,loading:s,error:f,manualUpdate:m,forceRefresh:h})=>(0,e.jsx)(a.Fragment,{children:t({handleCreate:(e,t={method:"POST"})=>{e.preventDefault();const{method:a="POST",pathTail:s}=t,i=d(e.target),c=`${g}/${s?`${s}/`:""}`;return r(S,w,1,`[create][${a}]`,`${T}/${c}`,i),u(T,c,{data:JSON.stringify(i),method:a,headers:E,mode:S}).then((e=>{m?.([...o,e]),n?.()&&h?.()})).catch((()=>{console.error("Erreur de création","Une erreur est survenu lors de la création dans la base de données")}))},read:{data:o,loading:s,error:f},handleUpdate:(e,t={method:"PUT",name:_})=>{e.preventDefault();const{method:n="PUT",pathTail:a,name:s=_}=t,p=((e,r)=>{const t=d(e);return null==r||null!=t[r]?[t]:Object.entries(t).reduce(((e,t)=>{const o=t[0],[n,a]=(d=[o],i(d).map((e=>{const r=e[1],t=r[r.length-1];return[e[0].replace(new RegExp(`(-|_)?${t}$`),""),t]})))[0],s=e.find((e=>e[r]==a));var d;let c=a;try{c=parseInt(a)}catch(e){}return s?s[n]=t[1]:e.push({[r]:c,[n]:t[1]}),e}),[])})(e.target,s);let f;f="array"==y?[...o]:o;const g=[];return p.forEach((e=>{const t=c(e,j,s,a),d=`${O}/${t?`${t}/`:""}`;let i=!1;if("array"==y){const r=f.findIndex((e=>e[s]==t));if(null!=r){const t={...f[r],...e};i=!$()(f[r],t),f[r]=t}else f.push(e)}else i=!$()(f,o),f={...f,...e};i&&(r(S,w,1,`[update][${n}]`,`${T}/${d}`,e),g.push(u(T,d,{data:JSON.stringify(e),method:n,headers:E,mode:S})))})),Promise.all(g).then((()=>{m?.(f),l?.()&&h?.()}))},handleDelete:(e,t={method:"DELETE",name:_})=>{e?.preventDefault(),e?.stopPropagation();const{method:n="DELETE",pathTail:a,name:s=_,id:i}=t,l=c({[s]:i?.toString()??""},j,s,a),f=`${x}/${l?`${l}/`:""}`;return r(S,w,1,`[delete][${n}]`,`${T}/${f}`),u(T,f,{method:n,headers:E,mode:S,data:"path"==j?"":JSON.stringify(d(e.target))}).then((()=>{if("array"==y){const e=o.findIndex((e=>e[s]==i)),t=o;r(S,w,3,`Removing index ${e}`);const n=[...t.slice(0,e),...t.slice(e+1,t.length)];r(S,w,4,"Array updated",n),m?.(n)}else m?.(o);p?.()&&h?.()}))}},h)})})})}})(),n})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,