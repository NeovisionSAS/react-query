/*! For license information please see module.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define(["react"],t):"object"==typeof exports?exports["react-query"]=t(require("react")):e["react-query"]=t(e.react)}(self,(e=>(()=>{"use strict";var t={63:e=>{e.exports=function e(t,r){if(t===r)return!0;if(t&&r&&"object"==typeof t&&"object"==typeof r){if(t.constructor!==r.constructor)return!1;var o,n,a;if(Array.isArray(t)){if((o=t.length)!=r.length)return!1;for(n=o;0!=n--;)if(!e(t[n],r[n]))return!1;return!0}if(t.constructor===RegExp)return t.source===r.source&&t.flags===r.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===r.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===r.toString();if((o=(a=Object.keys(t)).length)!==Object.keys(r).length)return!1;for(n=o;0!=n--;)if(!Object.prototype.hasOwnProperty.call(r,a[n]))return!1;for(n=o;0!=n--;){var d=a[n];if(!e(t[d],r[d]))return!1}return!0}return t!=t&&r!=r}},251:(e,t,r)=>{var o=r(156),n=Symbol.for("react.element"),a=Symbol.for("react.fragment"),d=Object.prototype.hasOwnProperty,s=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function i(e,t,r){var o,a={},i=null,c=null;for(o in void 0!==r&&(i=""+r),void 0!==t.key&&(i=""+t.key),void 0!==t.ref&&(c=t.ref),t)d.call(t,o)&&!l.hasOwnProperty(o)&&(a[o]=t[o]);if(e&&e.defaultProps)for(o in t=e.defaultProps)void 0===a[o]&&(a[o]=t[o]);return{$$typeof:n,type:e,key:i,ref:c,props:a,_owner:s.current}}t.Fragment=a,t.jsx=i,t.jsxs=i},893:(e,t,r)=>{e.exports=r(251)},156:t=>{t.exports=e}},r={};function o(e){var n=r[e];if(void 0!==n)return n.exports;var a=r[e]={exports:{}};return t[e](a,a.exports,o),a.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};return(()=>{o.r(n),o.d(n,{CRUD:()=>S,Query:()=>E,QueryOptionsProvider:()=>w,request:()=>m,useQuery:()=>j,useQueryOptions:()=>v,useRequest:()=>O});var e=o(893);const t=(e,t,r,...o)=>{"development"==e&&r<=t&&console.log("[react-query]",...o)};var r=o(156),a=o.n(r);const d=e=>{const t=e;return Object.keys(e).map((e=>t[e])).filter((e=>{const t=e.tagName?.toLocaleLowerCase?.();return e.name&&("input"==t||"select"==t)})).reduce(((e,t)=>{const{name:r,value:o,checked:n,type:a,required:d}=t,s="checkbox"==a;if(d&&(""==o||null==o))throw new Error(`Can't use an empty value for ${r}`);let l="number"==a?new Number(o).valueOf():o;return{...e,[r]:s?n:l}}),{})},s=e=>e.map((e=>[e,e.replace(/([0-9]+)/," $1").replace(/(-|_)/g," ").replace(/([A-Z])/g," $1").trim().toLocaleLowerCase().split(" ").filter((e=>""!=e))])),l=(e,t,r,o)=>{const n=e[r];return"path"==t&&""!=n&&null!=n?n:o??""},i=(e,t)=>t?Object.merge(e,{"Content-Type":t}):"multipart/form-data"==t?Object.exclude(e,"Content-Type"):e;class c extends DOMException{constructor(e){super(e??"The operation was aborted.","AbortError")}}const u=(e,t,r)=>{const{upload:o,download:n}=e;return e.upload=p(e.upload,t.upload),e.download=p(e.download,t.download),{upload:o,download:n,total:{get loaded(){return o.loaded+n.loaded},get total(){return o.total+n.total},get percentage(){return(o.percentage+n.percentage)/(1/(r??.5))}}}},p=(e,t)=>({loaded:t?.loaded??e.loaded,total:t?.total??e.total,get percentage(){return 0==this.total?0:this.loaded/this.total*100}}),f=()=>({upload:h(),download:h(),total:h()}),h=()=>({loaded:0,percentage:0,total:0}),m=function(e,t,r={method:"GET"}){const{method:o="GET",headers:n,mode:a="production",onRejected:s,data:l,...p}=r,{body:h,contentType:m}=(e=>null==e||"string"==typeof e?{body:e}:"FormData"==e.constructor.name?{body:e,contentType:"multipart/form-data"}:{body:JSON.stringify(d(e.target)),contentType:"application/x-www-form-urlencoded"})(l),y=r=>((e,t)=>{try{const{method:r="GET",signal:o,body:n,progress:a,headers:d,progressCenterRatio:s=.5}=t??{},l=f();return o?.aborted?Promise.reject(new c(o.reason)):new Promise(((t,i)=>{const p=new XMLHttpRequest;p.open(r,e.toString(),!0),((e,t)=>{Object.entries(t).forEach((t=>{const[r,o]=t;e.setRequestHeader(r,o)}))})(p,d??{}),p.addEventListener("load",(()=>{const e=((e,t)=>e.get("content-type")?.includes("application/json")?JSON.parse(t):t)((e=>{const t=e.trim().split(/[\r\n]+/),r={};return t.forEach((e=>{const t=e.split(": "),o=t.shift(),n=t.join(": ");r[o]=n})),new Headers(r)})(p.getAllResponseHeaders()),p.response);t(e)})),o?.addEventListener("abort",(()=>{p.abort(),i(new c)})),a&&(p.upload.addEventListener("progress",(e=>{((e,t,r,o)=>{const{loaded:n,total:a}=e;r(u(t,{upload:{loaded:n,total:a}},o))})(e,l,a,s)})),p.addEventListener("progress",(e=>{((e,t,r,o)=>{const{loaded:n,total:a}=e;r(u(t,{download:{loaded:n,total:a}},o))})(e,l,a,s)}))),p.send(n)}))}catch(t){throw new Error(`Unable to fetch ${e}`)}})(`${e}/${t}`,{headers:i(r,m),method:o,body:h,...p}).catch((e=>{if("AbortError"!=e.name)throw new Error(e);((e,t,r,...o)=>{"development"==e&&r<=t&&console.warn("[react-query]",...o)})(a,0,0,e.message)}));return n?n().then(y):y({})};class y extends a().Component{state={hasError:!1,error:{e:void 0,info:void 0}};componentDidCatch=(e,t)=>{console.error(e),this.setState({hasError:!0,error:{e,info:t}})};render(){const{children:t}=this.props,{hasError:r,error:o}=this.state;return r?(0,e.jsxs)("div",{className:"SIApxQzQlZp0L1gN0_QW",children:[(0,e.jsx)("div",{children:o?.e?.message}),(0,e.jsx)("hr",{}),(0,e.jsx)("div",{children:o?.info?.componentStack})]}):(0,e.jsx)(a().Fragment,{children:t})}}const g=y,b=(0,r.createContext)({domain:"",parameterType:"path",mode:"production",verbosity:1,idName:"id"}),v=()=>{const e=(0,r.useContext)(b);if(!e)throw new Error("No context for 'useQueryOptions'");return e.idName||(e.idName="id"),e},O=(e={method:"GET"},t)=>{const[o,n]=(0,r.useState)(!0),[a,d]=(0,r.useState)(new AbortController),{loader:s,...l}=v();return(0,r.useEffect)((()=>o?()=>{n(!1)}:()=>{a.abort("The user aborted a request."),d(new AbortController)}),[a,o]),(0,r.useMemo)((()=>{const t=Object.merge(e,l);return(e,r={method:"GET"})=>{const{domain:o,...n}=Object.merge(t,r);return m(o,e,{...n,signal:a?.signal})}}),[...t??[],a])},w=b.Provider,j=({query:e,delay:o,onRead:n,requestOptions:a={}})=>{const[d,s]=(0,r.useState)({data:void 0,loading:f(),error:void 0}),l=Object.merge(v(),a),{domain:i,mode:c,verbosity:u}=l,[p,h]=(0,r.useState)(),[y,g]=(0,r.useState)(!1),b=(0,r.useCallback)((e=>s({data:e,loading:!1,error:void 0})),[]);return(0,r.useEffect)((()=>{t(c,u,8,`[read][${e}]`,`${i}/${e}`),p?.abort();const r=new AbortController,a=window.setTimeout((()=>{const{signal:t,...o}=l;((e,t)=>m(i,e,t))(e,{signal:r.signal,...o}).then((e=>{e&&(s({data:e,loading:!1,error:void 0}),n?.(e))})).catch((e=>{s({data:void 0,loading:!1,error:e.toString()})}))}),o??0);return h(r),s({data:void 0,loading:!0,error:void 0}),()=>{r?.abort(),window.clearTimeout(a)}}),[e,y]),{...d,manualUpdate:b,forceRefresh:()=>g(!y)}},E=({children:t,...r})=>{const{loader:o}=v(),{loading:n,...a}=j(r),d=t({loading:n,...a});return(0,e.jsx)(g,{children:n&&o&&o.autoload?(0,e.jsx)(e.Fragment,{children:o.loader??(0,e.jsx)("div",{children:"Loading data..."})}):d})};var x=o(63),$=o.n(x);const S=({children:o,endPoints:n,onCreated:a,onRead:i,onUpdated:c,onDeleted:u,delay:p,type:f="array"})=>{const[h,y,b,O]="string"==typeof n?new Array(4).fill(n):[n.create,n.read,n.update,n.delete],{parameterType:w,domain:j,headers:x,mode:S,verbosity:T,idName:_}=v();return(0,r.useEffect)((()=>{t(S,T,5,"[endpoints]",`[C]${h}`,`[R]${y}`,`[U]${b}`,`[D]${O}`)}),[h,y,b,O]),(0,e.jsx)(g,{children:(0,e.jsx)(E,{query:`${y}`,delay:p,onRead:i,children:({data:n,loading:i,error:p,manualUpdate:y,forceRefresh:g})=>(0,e.jsx)(r.Fragment,{children:o({handleCreate:(e,r={method:"POST"})=>{e.preventDefault();const{method:o="POST",pathTail:s}=r,l=d(e.target),i=`${h}/${s?`${s}/`:""}`;return t(S,T,1,`[create][${o}]`,`${j}/${i}`,l),m(j,i,{data:JSON.stringify(l),method:o,headers:x,mode:S}).then((e=>{y?.([...n,e]),a?.()&&g?.()})).catch((()=>{console.error("Erreur de création","Une erreur est survenu lors de la création dans la base de données")}))},read:{data:n,loading:i,error:p},handleUpdate:(e,r={method:"PUT",name:_})=>{e.preventDefault();const{method:o="PUT",pathTail:a,name:i=_}=r,u=((e,t)=>{const r=d(e);return null==t||null!=r[t]?[r]:Object.entries(r).reduce(((e,r)=>{const o=r[0],[n,a]=(l=[o],s(l).map((e=>{const t=e[1],r=t[t.length-1];return[e[0].replace(new RegExp(`(-|_)?${r}$`),""),r]})))[0],d=e.find((e=>e[t]==a));var l;let i=a;try{i=parseInt(a)}catch(e){}return d?d[n]=r[1]:e.push({[t]:i,[n]:r[1]}),e}),[])})(e.target,i);let p;p="array"==f?[...n]:n;const h=[];return u.forEach((e=>{const r=l(e,w,i,a),d=`${b}/${r?`${r}/`:""}`;let s=!1;if("array"==f){const t=p.findIndex((e=>e[i]==r));if(null!=t){const r={...p[t],...e};s=!$()(p[t],r),p[t]=r}else p.push(e)}else s=!$()(p,n),p={...p,...e};s&&(t(S,T,1,`[update][${o}]`,`${j}/${d}`,e),h.push(m(j,d,{data:JSON.stringify(e),method:o,headers:x,mode:S})))})),Promise.all(h).then((()=>{y?.(p),c?.()&&g?.()}))},handleDelete:(e,r={method:"DELETE",name:_})=>{e?.preventDefault(),e?.stopPropagation();const{method:o="DELETE",pathTail:a,name:s=_,id:i}=r,c=l({[s]:i?.toString()??""},w,s,a),p=`${O}/${c?`${c}/`:""}`;return t(S,T,1,`[delete][${o}]`,`${j}/${p}`),m(j,p,{method:o,headers:x,mode:S,data:"path"==w?"":JSON.stringify(d(e.target))}).then((()=>{if("array"==f){const e=n.findIndex((e=>e[s]==i)),r=n;t(S,T,3,`Removing index ${e}`);const o=[...r.slice(0,e),...r.slice(e+1,r.length)];t(S,T,4,"Array updated",o),y?.(o)}else y?.(n);u?.()&&g?.()}))}},g)})})})}})(),n})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,