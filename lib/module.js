/*! For license information please see module.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define(["react"],t):"object"==typeof exports?exports["react-query"]=t(require("react")):e["react-query"]=t(e.react)}(self,(e=>(()=>{"use strict";var t={215:function(e,t,r){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(893),a=r(616),u=r(581),s=r(187),d=o(r(434)),i=o(r(324)),l=r(759),c=o(r(63)),p=r(156);t.default=({children:e,endPoints:t,onCreated:r,onRead:o,onUpdated:f,onDeleted:y,delay:m,type:h="array"})=>{const[g,b,v,O]="string"==typeof t?new Array(4).fill(t):[t.create,t.read,t.update,t.delete],{parameterType:_,domain:j,requestMiddleware:q,mode:P,verbosity:x,idName:E}=(0,l.useQueryOptions)();return(0,p.useEffect)((()=>{(0,u.requestLog)(P,x,5,"[endpoints]",`[C]${g}`,`[R]${b}`,`[U]${v}`,`[D]${O}`)}),[g,b,v,O]),(0,n.jsx)(d.default,{children:(0,n.jsx)(i.default,{query:`${b}`,delay:m,onRead:o,children:(t,o,d,i,l)=>(0,n.jsx)(p.Fragment,{children:e({handleCreate:(e,o={method:"POST"})=>{e.preventDefault();const{method:n="POST",pathTail:d}=o,c=(0,s.getFormData)(e.target),p=`${g}/${d?`${d}/`:""}`;return(0,u.requestLog)(P,x,1,`[create][${n}]`,`${j}/${p}`,c),(0,a.request)(j,p,{body:JSON.stringify(c),method:n,headers:q?.(),mode:P}).then((e=>{i?.([...t,e]),r?.()&&l?.()})).catch((()=>{console.error("Erreur de création","Une erreur est survenu lors de la création dans la base de données")}))},read:{data:t,loading:o,error:d},handleUpdate:(e,r={method:"PUT",name:E})=>{e.preventDefault();const{method:o="PUT",pathTail:n,name:d=E}=r,p=(0,s.formExtractor)(e.target,d);let y;y="array"==h?[...t]:t;const m=[];return p.forEach((e=>{const r=(0,s.getPathTail)(e,_,d,n),i=`${v}/${r?`${r}/`:""}`;let l=!1;if("array"==h){const t=y.findIndex((e=>e[d]==r));if(null!=t){const r={...y[t],...e};l=!(0,c.default)(y[t],r),y[t]=r}else y.push(e)}else l=!(0,c.default)(y,t),y={...y,...e};l&&((0,u.requestLog)(P,x,1,`[update][${o}]`,`${j}/${i}`,e),m.push((0,a.request)(j,i,{body:JSON.stringify(e),method:o,headers:q?.(),mode:P})))})),Promise.all(m).then((()=>{i?.(y),f?.()&&l?.()}))},handleDelete:(e,r={method:"DELETE",name:E})=>{e?.preventDefault(),e?.stopPropagation();const{method:o="DELETE",pathTail:n,name:d=E,id:c}=r,p=(0,s.getPathTail)({[d]:c.toString()},_,d,n),f=`${O}/${p}/`;return(0,u.requestLog)(P,x,1,`[delete][${o}]`,`${j}/${f}`),(0,a.request)(j,f,{method:o,headers:q?.(),mode:P}).then((()=>{if("array"==h){const e=t.findIndex((e=>e[d]==c)),r=t;(0,u.requestLog)(P,x,3,`Removing index ${e}`);const o=[...r.slice(0,e),...r.slice(e+1,r.length)];(0,u.requestLog)(P,x,4,"Array updated",o),i?.(o)}else i?.(t);y?.()&&l?.()}))}},l)})})})}},434:function(e,t,r){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(893),a=o(r(180)),u=o(r(156));class s extends u.default.Component{constructor(){super(...arguments),this.state={hasError:!1,error:{e:void 0,info:void 0}},this.componentDidCatch=(e,t)=>{console.error(e),this.setState({hasError:!0,error:{e,info:t}})}}render(){const{children:e}=this.props,{hasError:t,error:r}=this.state;return t?(0,n.jsxs)("div",{className:a.default.main,children:[(0,n.jsx)("div",{children:r?.e?.message}),(0,n.jsx)("hr",{}),(0,n.jsx)("div",{children:r?.info?.componentStack})]}):(0,n.jsx)(u.default.Fragment,{children:e})}}t.default=s},324:function(e,t,r){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(893),a=o(r(434)),u=r(759),s=r(156);t.default=({children:e,query:t,method:r,delay:o,body:d,onRead:i})=>{const[l,c]=(0,s.useState)({data:null,loading:!0,error:null}),p=(0,u.useRequest)(),[f,y]=(0,s.useState)(),[m,h]=(0,s.useState)(!1),g=(0,s.useCallback)((e=>c({data:e,loading:!1,error:null})),[l]);return(0,s.useEffect)((()=>{f?.abort();const e=new AbortController,r=window.setTimeout((()=>{p(t,{signal:e.signal}).then((e=>{c({data:e,loading:!1,error:null}),i?.(e)})).catch((e=>{"AbortError"!=e.name&&c({data:null,loading:!1,error:e.toString()})}))}),o??0);return y(e),c({data:null,loading:!0,error:null}),()=>{e?.abort(),window.clearTimeout(r)}}),[t,m]),(0,n.jsx)(a.default,{children:e(l.data,l.loading,l.error,g,(()=>h(!m)))})}},759:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.QueryOptionsProvider=t.useRequest=t.useQueryOptions=void 0;const o=r(616),n=r(156),a=(0,n.createContext)({domain:"",parameterType:"path",mode:"production",verbosity:1,idName:"id"});t.useQueryOptions=()=>{const e=(0,n.useContext)(a);if(!e)throw new Error("No context for 'useQueryOptions'");return e.idName||(e.idName="id"),e},t.useRequest=()=>{const{domain:e,mode:r,requestMiddleware:n}=(0,t.useQueryOptions)();return function(t,a={method:"GET"}){const{headers:u=n?.(),body:s,method:d="GET",mode:i=r,signal:l}=a;return(0,o.request)(e,t,{body:s,headers:u,method:d,mode:i,signal:l})}},t.QueryOptionsProvider=a.Provider},276:function(e,t,r){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useQueryOptions=t.useRequest=t.request=t.QueryOptionsProvider=t.Query=t.CRUD=void 0;const n=o(r(215));t.CRUD=n.default;const a=o(r(324));t.Query=a.default;const u=r(759);Object.defineProperty(t,"QueryOptionsProvider",{enumerable:!0,get:function(){return u.QueryOptionsProvider}}),Object.defineProperty(t,"useQueryOptions",{enumerable:!0,get:function(){return u.useQueryOptions}}),Object.defineProperty(t,"useRequest",{enumerable:!0,get:function(){return u.useRequest}});const s=r(616);Object.defineProperty(t,"request",{enumerable:!0,get:function(){return s.request}})},616:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.request=void 0;const o=r(581);t.request=function(e,t,r={method:"GET"}){const{body:n,method:a="GET",headers:u,mode:s="production",signal:d}=r,i=r=>fetch(`${e}/${t}`,{headers:r,method:a,body:n,signal:d}).then((e=>e.ok?e.text().then((t=>{try{if("application/json"==r?.["Content-Type"])return JSON.parse(t)}catch(t){(0,o.queryWarn)(s,0,0,"Could not parse response to json",e)}return t})):Promise.reject(e))).catch((e=>new Promise(((t,r)=>{"AbortError"==e.name?(0,o.queryWarn)(s,0,0,e.message):((0,o.queryError)(`${e.url} ${e.status} ${e.statusText}`),r(e))}))));return u?u.then(i):i({})}},581:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.queryError=t.queryWarn=t.requestLog=void 0,t.requestLog=(e,t,r,...o)=>{"development"==e&&r<=t&&console.log("[react-query]",...o)},t.queryWarn=(e,t,r,...o)=>{"development"==e&&r<=t&&console.warn("[react-query]",...o)},t.queryError=(...e)=>{console.error("[react-query]",...e)}},187:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.useForceUpdate=t.getPathTail=t.seperate=t.seperateAndKeepIds=t.formExtractor=t.getFormData=void 0;const o=r(156);t.getFormData=e=>{const t=e;return Object.keys(e).map((e=>t[e])).filter((e=>{const t=e.tagName?.toLocaleLowerCase?.();return e.name&&("input"==t||"select"==t)})).reduce(((e,t)=>{const{name:r,value:o,checked:n,type:a,required:u}=t,s="checkbox"==a;if(u&&(""==o||null==o))throw new Error(`Can't use an empty value for ${r}`);let d="number"==a?new Number(o).valueOf():o;return{...e,[r]:s?n:d}}),{})},t.formExtractor=(e,r)=>{const o=(0,t.getFormData)(e);return null!=o[r]?[o]:Object.entries(o).reduce(((e,o)=>{const n=o[0],[a,u]=(0,t.seperateAndKeepIds)([n])[0],s=e.find((e=>e[r]==u));let d=u;try{d=parseInt(u)}catch(e){}return s?s[a]=o[1]:e.push({[r]:d,[a]:o[1]}),e}),[])},t.seperateAndKeepIds=e=>(0,t.seperate)(e).map((e=>{const t=e[1],r=t[t.length-1];return[e[0].replace(new RegExp(`(-|_)?${r}$`),""),r]})),t.seperate=e=>e.map((e=>[e,e.replace(/([0-9]+)/," $1").replace(/(-|_)/g," ").replace(/([A-Z])/g," $1").trim().toLocaleLowerCase().split(" ").filter((e=>""!=e))])),t.getPathTail=(e,t,r,o)=>{const n=e[r];return"path"==t&&""!=n&&null!=n?n:o},t.useForceUpdate=()=>(0,o.useReducer)((()=>({})),{})[1]},63:e=>{e.exports=function e(t,r){if(t===r)return!0;if(t&&r&&"object"==typeof t&&"object"==typeof r){if(t.constructor!==r.constructor)return!1;var o,n,a;if(Array.isArray(t)){if((o=t.length)!=r.length)return!1;for(n=o;0!=n--;)if(!e(t[n],r[n]))return!1;return!0}if(t.constructor===RegExp)return t.source===r.source&&t.flags===r.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===r.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===r.toString();if((o=(a=Object.keys(t)).length)!==Object.keys(r).length)return!1;for(n=o;0!=n--;)if(!Object.prototype.hasOwnProperty.call(r,a[n]))return!1;for(n=o;0!=n--;){var u=a[n];if(!e(t[u],r[u]))return!1}return!0}return t!=t&&r!=r}},180:(e,t,r)=>{r.r(t),r.d(t,{default:()=>o});const o={"button-default":"N34oaDgHtJlptqxVv9Pn","button-selected":"Ja0ovO_h3eaEsaboqDC7","button-primary":"KTfuLE7LnSGRHDFPD0EA","button-validate":"jY9MIHyO7T8W_QNpfx0k","button-inverse":"m40wbnuJh67XxmYctJLR","button-ignore":"ZeIjhLVvw0JqjuR8kYjT","button-invalid":"ZedjeDkFzo6JcAGxyZPn","button-valid":"Jk7f76XpP7SLD92LvmM3",main:"SIApxQzQlZp0L1gN0_QW"}},251:(e,t,r)=>{var o=r(156),n=Symbol.for("react.element"),a=Symbol.for("react.fragment"),u=Object.prototype.hasOwnProperty,s=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,d={key:!0,ref:!0,__self:!0,__source:!0};function i(e,t,r){var o,a={},i=null,l=null;for(o in void 0!==r&&(i=""+r),void 0!==t.key&&(i=""+t.key),void 0!==t.ref&&(l=t.ref),t)u.call(t,o)&&!d.hasOwnProperty(o)&&(a[o]=t[o]);if(e&&e.defaultProps)for(o in t=e.defaultProps)void 0===a[o]&&(a[o]=t[o]);return{$$typeof:n,type:e,key:i,ref:l,props:a,_owner:s.current}}t.Fragment=a,t.jsx=i,t.jsxs=i},893:(e,t,r)=>{e.exports=r(251)},156:t=>{t.exports=e}},r={};function o(e){var n=r[e];if(void 0!==n)return n.exports;var a=r[e]={exports:{}};return t[e].call(a.exports,a,a.exports,o),a.exports}return o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o(276)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,