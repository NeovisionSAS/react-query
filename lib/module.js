/*! For license information please see module.js.LICENSE.txt */
!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r(require("react")):"function"==typeof define&&define.amd?define(["react"],r):"object"==typeof exports?exports["react-query"]=r(require("react")):e["react-query"]=r(e.react)}(self,(e=>(()=>{"use strict";var r={63:e=>{e.exports=function e(r,t){if(r===t)return!0;if(r&&t&&"object"==typeof r&&"object"==typeof t){if(r.constructor!==t.constructor)return!1;var o,n,a;if(Array.isArray(r)){if((o=r.length)!=t.length)return!1;for(n=o;0!=n--;)if(!e(r[n],t[n]))return!1;return!0}if(r.constructor===RegExp)return r.source===t.source&&r.flags===t.flags;if(r.valueOf!==Object.prototype.valueOf)return r.valueOf()===t.valueOf();if(r.toString!==Object.prototype.toString)return r.toString()===t.toString();if((o=(a=Object.keys(r)).length)!==Object.keys(t).length)return!1;for(n=o;0!=n--;)if(!Object.prototype.hasOwnProperty.call(t,a[n]))return!1;for(n=o;0!=n--;){var s=a[n];if(!e(r[s],t[s]))return!1}return!0}return r!=r&&t!=t}},251:(e,r,t)=>{var o=t(156),n=Symbol.for("react.element"),a=Symbol.for("react.fragment"),s=Object.prototype.hasOwnProperty,d=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,i={key:!0,ref:!0,__self:!0,__source:!0};function c(e,r,t){var o,a={},c=null,u=null;for(o in void 0!==t&&(c=""+t),void 0!==r.key&&(c=""+r.key),void 0!==r.ref&&(u=r.ref),r)s.call(r,o)&&!i.hasOwnProperty(o)&&(a[o]=r[o]);if(e&&e.defaultProps)for(o in r=e.defaultProps)void 0===a[o]&&(a[o]=r[o]);return{$$typeof:n,type:e,key:c,ref:u,props:a,_owner:d.current}}r.Fragment=a,r.jsx=c,r.jsxs=c},893:(e,r,t)=>{e.exports=t(251)},156:r=>{r.exports=e}},t={};function o(e){var n=t[e];if(void 0!==n)return n.exports;var a=t[e]={exports:{}};return r[e](a,a.exports,o),a.exports}o.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return o.d(r,{a:r}),r},o.d=(e,r)=>{for(var t in r)o.o(r,t)&&!o.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},o.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};return(()=>{o.r(n),o.d(n,{CRUD:()=>O,Query:()=>$,QueryOptionsProvider:()=>g,request:()=>s,useQuery:()=>v,useQueryOptions:()=>m,useRequest:()=>y});var e=o(893);const r=(e,r,t,...o)=>{"development"==e&&t<=r&&console.log("[react-query]",...o)},t=(e,r,t,...o)=>{"development"==e&&t<=r&&console.warn("[react-query]",...o)},a=(...e)=>{console.error("[react-query]",...e)},s=function(e,r,o={method:"GET"}){const{method:n="GET",headers:s,mode:d="production",onRejected:i,...c}=o,u=o=>fetch(`${e}/${r}`,{headers:o,method:n,...c}).then((e=>e.ok?e.text().then((r=>{try{if(e.headers.get("Content-Type")?.includes("application/json"))return JSON.parse(r)}catch(r){t(d,0,0,"Could not parse response to json",e)}return r})):(a(`${e.url} ${e.status} ${e.statusText}`),i?.(e),Promise.reject(e.statusText)))).catch((e=>{if("AbortError"!=e.name)throw a(`${e.url} ${e.status} ${e.statusText}`),i?.(e),new Error(`${e.status} ${e.statusText}`);t(d,0,0,e.message)}));return s?s().then(u):u({})};var d=o(156),i=o.n(d);const c=e=>{const r=e;return Object.keys(e).map((e=>r[e])).filter((e=>{const r=e.tagName?.toLocaleLowerCase?.();return e.name&&("input"==r||"select"==r)})).reduce(((e,r)=>{const{name:t,value:o,checked:n,type:a,required:s}=r,d="checkbox"==a;if(s&&(""==o||null==o))throw new Error(`Can't use an empty value for ${t}`);let i="number"==a?new Number(o).valueOf():o;return{...e,[t]:d?n:i}}),{})},u=e=>e.map((e=>[e,e.replace(/([0-9]+)/," $1").replace(/(-|_)/g," ").replace(/([A-Z])/g," $1").trim().toLocaleLowerCase().split(" ").filter((e=>""!=e))])),l=(e,r,t,o)=>{const n=e[t];return"path"==r&&""!=n&&null!=n?n:o??""};class p extends i().Component{state={hasError:!1,error:{e:void 0,info:void 0}};componentDidCatch=(e,r)=>{console.error(e),this.setState({hasError:!0,error:{e,info:r}})};render(){const{children:r}=this.props,{hasError:t,error:o}=this.state;return t?(0,e.jsxs)("div",{className:"SIApxQzQlZp0L1gN0_QW",children:[(0,e.jsx)("div",{children:o?.e?.message}),(0,e.jsx)("hr",{}),(0,e.jsx)("div",{children:o?.info?.componentStack})]}):(0,e.jsx)(i().Fragment,{children:r})}}const f=p,h=(0,d.createContext)({domain:"",parameterType:"path",mode:"production",verbosity:1,idName:"id"}),m=()=>{const e=(0,d.useContext)(h);if(!e)throw new Error("No context for 'useQueryOptions'");return e.idName||(e.idName="id"),e},y=({method:e="GET",...r}={method:"GET"})=>{const{domain:t,...o}=m();return(e,n={method:"GET"})=>s(t,e,Object.merge(r,o,n))},g=h.Provider,v=({query:e,delay:r,onRead:t,requestOptions:o={},useConfig:n=!0})=>{const[a,i]=(0,d.useState)({data:void 0,loading:!0,error:void 0}),{domain:c="",...u}=o;let l;l=n?y(m()):(e,r)=>s(c,e,r);const[p,f]=(0,d.useState)(),[h,g]=(0,d.useState)(!1),v=(0,d.useCallback)((e=>i({data:e,loading:!1,error:void 0})),[]);return(0,d.useEffect)((()=>{p?.abort();const o=new AbortController,n=window.setTimeout((()=>{const{signal:r,...n}=u;l(e,{signal:r??o.signal,...n}).then((e=>{i({data:e,loading:!1,error:void 0}),t?.(e)})).catch((e=>{i({data:void 0,loading:!1,error:e.toString()})}))}),r??0);return f(o),i({data:void 0,loading:!0,error:void 0}),()=>{o?.abort(),window.clearTimeout(n)}}),[e,h]),{...a,manualUpdate:v,forceRefresh:()=>g(!h)}},$=({children:r,useConfig:t=!0,...o})=>{const{loader:n}=m(),{loading:a,...s}=v({...o,useConfig:t}),d=r({loading:a,...s});return(0,e.jsx)(f,{children:a&&n.autoload?(0,e.jsx)(e.Fragment,{children:n.loader??(0,e.jsx)("div",{children:"Loading data..."})}):d})};var x=o(63),b=o.n(x);const O=({children:t,endPoints:o,onCreated:n,onRead:a,onUpdated:i,onDeleted:p,delay:h,type:y="array"})=>{const[g,v,x,O]="string"==typeof o?new Array(4).fill(o):[o.create,o.read,o.update,o.delete],{parameterType:j,domain:E,requestMiddleware:S,mode:T,verbosity:w,idName:_}=m();return(0,d.useEffect)((()=>{r(T,w,5,"[endpoints]",`[C]${g}`,`[R]${v}`,`[U]${x}`,`[D]${O}`)}),[g,v,x,O]),(0,e.jsx)(f,{children:(0,e.jsx)($,{query:`${v}`,delay:h,onRead:a,children:({data:o,loading:a,error:f,manualUpdate:h,forceRefresh:m})=>(0,e.jsx)(d.Fragment,{children:t({handleCreate:(e,t={method:"POST"})=>{e.preventDefault();const{method:a="POST",pathTail:d}=t,i=c(e.target),u=`${g}/${d?`${d}/`:""}`;return r(T,w,1,`[create][${a}]`,`${E}/${u}`,i),s(E,u,{body:JSON.stringify(i),method:a,headers:S,mode:T}).then((e=>{h?.([...o,e]),n?.()&&m?.()})).catch((()=>{console.error("Erreur de création","Une erreur est survenu lors de la création dans la base de données")}))},read:{data:o,loading:a,error:f},handleUpdate:(e,t={method:"PUT",name:_})=>{e.preventDefault();const{method:n="PUT",pathTail:a,name:d=_}=t,p=((e,r)=>{const t=c(e);return null!=t[r]?[t]:Object.entries(t).reduce(((e,t)=>{const o=t[0],[n,a]=(d=[o],u(d).map((e=>{const r=e[1],t=r[r.length-1];return[e[0].replace(new RegExp(`(-|_)?${t}$`),""),t]})))[0],s=e.find((e=>e[r]==a));var d;let i=a;try{i=parseInt(a)}catch(e){}return s?s[n]=t[1]:e.push({[r]:i,[n]:t[1]}),e}),[])})(e.target,d);let f;f="array"==y?[...o]:o;const g=[];return p.forEach((e=>{const t=l(e,j,d,a),i=`${x}/${t?`${t}/`:""}`;let c=!1;if("array"==y){const r=f.findIndex((e=>e[d]==t));if(null!=r){const t={...f[r],...e};c=!b()(f[r],t),f[r]=t}else f.push(e)}else c=!b()(f,o),f={...f,...e};c&&(r(T,w,1,`[update][${n}]`,`${E}/${i}`,e),g.push(s(E,i,{body:JSON.stringify(e),method:n,headers:S,mode:T})))})),Promise.all(g).then((()=>{h?.(f),i?.()&&m?.()}))},handleDelete:(e,t={method:"DELETE",name:_})=>{e?.preventDefault(),e?.stopPropagation();const{method:n="DELETE",pathTail:a,name:d=_,id:i}=t,u=l({[d]:i?.toString()??""},j,d,a),f=`${O}/${u?`${u}/`:""}`;return r(T,w,1,`[delete][${n}]`,`${E}/${f}`),s(E,f,{method:n,headers:S,mode:T,body:"path"==j?"":JSON.stringify(c(e.target))}).then((()=>{if("array"==y){const e=o.findIndex((e=>e[d]==i)),t=o;r(T,w,3,`Removing index ${e}`);const n=[...t.slice(0,e),...t.slice(e+1,t.length)];r(T,w,4,"Array updated",n),h?.(n)}else h?.(o);p?.()&&m?.()}))}},m)})})})}})(),n})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,